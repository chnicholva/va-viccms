/*
------------------------------------------- START OF THIRD PARTY NOTICE -----------------------------------------

This file is based on or incorporates material from the projects listed below (Third Party IP). The original copyright notice and the license under which Microsoft received such Third Party IP, are set forth below. Such licenses and notices are provided for informational purposes only. Microsoft licenses the Third Party IP to you under the licensing terms for the Microsoft product. Microsoft reserves all other rights not expressly granted under this agreement, whether by implication, estoppel or otherwise. 

jQuery Mobile 1.4.2
Copyright 2010, 2014 jQuery Foundation, Inc. and other contributors

Provided for Informational Purposes Only
MIT License 
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: 
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE 
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
----------------------------------------------- END OF THIRD PARTY NOTICE ------------------------------------------
*/
(function (root, doc, factory) { if (typeof define === "function" && define.amd) define(["jquery"], function ($) { factory($, root, doc); return $.mobile }); else factory(root.jQuery, root, doc) })(this, document, function (jQuery, window, document, undefined) { (function ($) { $.mobile = $.mobile || {} })(jQuery); (function ($, window, undefined) { var nsNormalizeDict = {}, oldFind = $.find, rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/, jqmDataRE = /:jqmData\(([^)]*)\)/g; $.extend($.mobile, { ns: "", getAttribute: function (element, key) { var data; element = element.jquery ? element[0] : element; if (element && element.getAttribute) data = element.getAttribute("data-" + $.mobile.ns + key); try { data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? JSON.parse(data) : data } catch (err) { } return data }, nsNormalizeDict: nsNormalizeDict, nsNormalize: function (prop) { return nsNormalizeDict[prop] || (nsNormalizeDict[prop] = $.camelCase($.mobile.ns + prop)) }, closestPageData: function ($target) { return $target.closest(":jqmData(role='page'), :jqmData(role='dialog')").data("mobile-page") } }); $.fn.jqmData = function (prop, value) { var result; if (typeof prop !== "undefined") { if (prop) prop = $.mobile.nsNormalize(prop); if (arguments.length < 2 || value === undefined) result = this.data(prop); else result = this.data(prop, value) } return result }; $.jqmData = function (elem, prop, value) { var result; if (typeof prop !== "undefined") result = $.data(elem, prop ? $.mobile.nsNormalize(prop) : prop, value); return result }; $.fn.jqmRemoveData = function (prop) { return this.removeData($.mobile.nsNormalize(prop)) }; $.jqmRemoveData = function (elem, prop) { return $.removeData(elem, $.mobile.nsNormalize(prop)) }; $.find = function (selector, context, ret, extra) { if (selector.indexOf(":jqmData") > -1) selector = selector.replace(jqmDataRE, "[data-" + ($.mobile.ns || "") + "$1]"); return oldFind.call(this, selector, context, ret, extra) }; $.extend($.find, oldFind) })(jQuery, this); (function ($, undefined) { var uuid = 0, slice = Array.prototype.slice, _cleanData = $.cleanData; $.cleanData = function (elems) { for (var i = 0, elem; (elem = elems[i]) != null; i++) try { $(elem).triggerHandler("remove") } catch (e) { } _cleanData(elems) }; $.widget = function (name, base, prototype) { var fullName, existingConstructor, constructor, basePrototype, proxiedPrototype = {}, namespace = name.split(".")[0]; name = name.split(".")[1]; fullName = namespace + "-" + name; if (!prototype) { prototype = base; base = $.Widget } $.expr[":"][fullName.toLowerCase()] = function (elem) { return !!$.data(elem, fullName) }; $[namespace] = $[namespace] || {}; existingConstructor = $[namespace][name]; constructor = $[namespace][name] = function (options, element) { if (!this._createWidget) return new constructor(options, element); arguments.length && this._createWidget(options, element) }; $.extend(constructor, existingConstructor, { version: prototype.version, _proto: $.extend({}, prototype), _childConstructors: [] }); basePrototype = new base; basePrototype.options = $.widget.extend({}, basePrototype.options); $.each(prototype, function (prop, value) { if (!$.isFunction(value)) { proxiedPrototype[prop] = value; return } proxiedPrototype[prop] = function () { var _super = function () { return base.prototype[prop].apply(this, arguments) }, _superApply = function (args) { return base.prototype[prop].apply(this, args) }; return function () { var __super = this._super, __superApply = this._superApply, returnValue; this._super = _super; this._superApply = _superApply; returnValue = value.apply(this, arguments); this._super = __super; this._superApply = __superApply; return returnValue } }() }); constructor.prototype = $.widget.extend(basePrototype, { widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix || name : name }, proxiedPrototype, { constructor: constructor, "namespace": namespace, widgetName: name, widgetFullName: fullName }); if (existingConstructor) { $.each(existingConstructor._childConstructors, function (i, child) { var childPrototype = child.prototype; $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto) }); delete existingConstructor._childConstructors } else base._childConstructors.push(constructor); $.widget.bridge(name, constructor); return constructor }; $.widget.extend = function (target) { for (var input = slice.call(arguments, 1), inputIndex = 0, inputLength = input.length, key, value; inputIndex < inputLength; inputIndex++) for (key in input[inputIndex]) { value = input[inputIndex][key]; if (input[inputIndex].hasOwnProperty(key) && value !== undefined) if ($.isPlainObject(value)) target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : $.widget.extend({}, value); else target[key] = value } return target }; $.widget.bridge = function (name, object) { var fullName = object.prototype.widgetFullName || name; $.fn[name] = function (options) { var isMethodCall = typeof options === "string", args = slice.call(arguments, 1), returnValue = this; options = !isMethodCall && args.length ? $.widget.extend.apply(null, [options].concat(args)) : options; if (isMethodCall) this.each(function () { var methodValue, instance = $.data(this, fullName); if (options === "instance") { returnValue = instance; return false } if (!instance) return $.error("cannot call methods on " + name + " prior to initialization; attempted to call method '" + options + "'"); if (!$.isFunction(instance[options]) || options.charAt(0) === "_") return $.error("no such method '" + options + "' for " + name + " widget instance"); methodValue = instance[options].apply(instance, args); if (methodValue !== instance && methodValue !== undefined) { returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue; return false } }); else this.each(function () { var instance = $.data(this, fullName); if (instance) instance.option(options || {})._init(); else $.data(this, fullName, new object(options, this)) }); return returnValue } }; $.Widget = function () { }; $.Widget._childConstructors = []; $.Widget.prototype = { widgetName: "widget", widgetEventPrefix: "", defaultElement: "<div>", options: { disabled: false, create: null }, _createWidget: function (options, element) { element = $(element || this.defaultElement || this)[0]; this.element = $(element); this.uuid = uuid++; this.eventNamespace = "." + this.widgetName + this.uuid; this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options); this.bindings = $(); this.hoverable = $(); this.focusable = $(); if (element !== this) { $.data(element, this.widgetFullName, this); this._on(true, this.element, { remove: function (event) { event.target === element && this.destroy() } }); this.document = $(element.style ? element.ownerDocument : element.document || element); this.window = $(this.document[0].defaultView || this.document[0].parentWindow) } this._create(); this._trigger("create", null, this._getCreateEventData()); this._init() }, _getCreateOptions: $.noop, _getCreateEventData: $.noop, _create: $.noop, _init: $.noop, destroy: function () { this._destroy(); this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData($.camelCase(this.widgetFullName)); this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled ui-state-disabled"); this.bindings.unbind(this.eventNamespace); this.hoverable.removeClass("ui-state-hover"); this.focusable.removeClass("ui-state-focus") }, _destroy: $.noop, widget: function () { return this.element }, option: function (key, value) { var options = key, parts, curOption, i; if (arguments.length === 0) return $.widget.extend({}, this.options); if (typeof key === "string") { options = {}; parts = key.split("."); key = parts.shift(); if (parts.length) { curOption = options[key] = $.widget.extend({}, this.options[key]); for (i = 0; i < parts.length - 1; i++) { curOption[parts[i]] = curOption[parts[i]] || {}; curOption = curOption[parts[i]] } key = parts.pop(); if (value === undefined) return curOption[key] === undefined ? null : curOption[key]; curOption[key] = value } else { if (value === undefined) return this.options[key] === undefined ? null : this.options[key]; options[key] = value } } this._setOptions(options); return this }, _setOptions: function (options) { var key; for (key in options) this._setOption(key, options[key]); return this }, _setOption: function (key, value) { this.options[key] = value; if (key === "disabled") { this.widget().toggleClass(this.widgetFullName + "-disabled", !!value); this.hoverable.removeClass("ui-state-hover"); this.focusable.removeClass("ui-state-focus") } return this }, enable: function () { return this._setOptions({ disabled: false }) }, disable: function () { return this._setOptions({ disabled: true }) }, _on: function (suppressDisabledCheck, element, handlers) { var delegateElement, instance = this; if (typeof suppressDisabledCheck !== "boolean") { handlers = element; element = suppressDisabledCheck; suppressDisabledCheck = false } if (!handlers) { handlers = element; element = this.element; delegateElement = this.widget() } else { element = delegateElement = $(element); this.bindings = this.bindings.add(element) } $.each(handlers, function (event, handler) { function handlerProxy() { if (!suppressDisabledCheck && (instance.options.disabled === true || $(this).hasClass("ui-state-disabled"))) return; return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments) } if (typeof handler !== "string") handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++; var match = event.match(/^(\w+)\s*(.*)$/), eventName = match[1] + instance.eventNamespace, selector = match[2]; if (selector) delegateElement.delegate(selector, eventName, handlerProxy); else element.bind(eventName, handlerProxy) }) }, _off: function (element, eventName) { eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace; element.unbind(eventName).undelegate(eventName) }, _delay: function (handler, delay) { function handlerProxy() { return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments) } var instance = this; return setTimeout(handlerProxy, delay || 0) }, _hoverable: function (element) { this.hoverable = this.hoverable.add(element); this._on(element, { mouseenter: function (event) { $(event.currentTarget).addClass("ui-state-hover") }, mouseleave: function (event) { $(event.currentTarget).removeClass("ui-state-hover") } }) }, _focusable: function (element) { this.focusable = this.focusable.add(element); this._on(element, { focusin: function (event) { $(event.currentTarget).addClass("ui-state-focus") }, focusout: function (event) { $(event.currentTarget).removeClass("ui-state-focus") } }) }, _trigger: function (type, event, data) { var prop, orig, callback = this.options[type]; data = data || {}; event = $.Event(event); event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase(); event.target = this.element[0]; orig = event.originalEvent; if (orig) for (prop in orig) if (!(prop in event)) event[prop] = orig[prop]; this.element.trigger(event, data); return !($.isFunction(callback) && callback.apply(this.element[0], [event].concat(data)) === false || event.isDefaultPrevented()) } }; $.each({ show: "fadeIn", hide: "fadeOut" }, function (method, defaultEffect) { $.Widget.prototype["_" + method] = function (element, options, callback) { if (typeof options === "string") options = { effect: options }; var hasOptions, effectName = !options ? method : options === true || typeof options === "number" ? defaultEffect : options.effect || defaultEffect; options = options || {}; if (typeof options === "number") options = { duration: options }; hasOptions = !$.isEmptyObject(options); options.complete = callback; options.delay && element.delay(options.delay); if (hasOptions && $.effects && $.effects.effect[effectName]) element[method](options); else if (effectName !== method && element[effectName]) element[effectName](options.duration, options.easing, callback); else element.queue(function (next) { $(this)[method](); callback && callback.call(element[0]); next() }) } }) })(jQuery); (function ($, undefined) { var rcapitals = /[A-Z]/g, replaceFunction = function (c) { return "-" + c.toLowerCase() }; $.extend($.Widget.prototype, { _getCreateOptions: function () { var option, value, elem = this.element[0], options = {}; if (!$.mobile.getAttribute(elem, "defaults")) for (option in this.options) { value = $.mobile.getAttribute(elem, option.replace(rcapitals, replaceFunction)); if (value != null) options[option] = value } return options } }); $.mobile.widget = $.Widget })(jQuery); (function ($, window, undefined) { $.extend($.mobile, { version: "1.4.2", subPageUrlKey: "ui-page", hideUrlBar: true, keepNative: ":jqmData(role='none'), :jqmData(role='nojs')", activePageClass: "ui-page-active", activeBtnClass: "ui-btn-active", focusClass: "ui-focus", ajaxEnabled: true, hashListeningEnabled: true, linkBindingEnabled: true, defaultPageTransition: "fade", maxTransitionWidth: false, minScrollBack: 0, defaultDialogTransition: "pop", pageLoadErrorMessage: "Error Loading Page", pageLoadErrorMessageTheme: "a", phonegapNavigationEnabled: false, autoInitializePage: true, pushStateEnabled: true, ignoreContentEnabled: false, buttonMarkup: { hoverDelay: 200 }, dynamicBaseEnabled: true, pageContainer: $(), allowCrossDomainPages: false, dialogHashKey: "&ui-state=dialog" }) })(jQuery, this); (function ($, undefined) { var uuid = 0, runiqueId = /^ui-id-\d+$/; $.ui = $.ui || {}; $.extend($.ui, { version: "c0ab71056b936627e8a7821f03c044aec6280a40", keyCode: { BACKSPACE: 8, COMMA: 188, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, LEFT: 37, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SPACE: 32, TAB: 9, UP: 38 } }); $.fn.extend({ focus: function (orig) { return function (delay, fn) { return typeof delay === "number" ? this.each(function () { var elem = this; setTimeout(function () { $(elem).focus(); fn && fn.call(elem) }, delay) }) : orig.apply(this, arguments) } }($.fn.focus), scrollParent: function () { var scrollParent; if ($.ui.ie && /(static|relative)/.test(this.css("position")) || /absolute/.test(this.css("position"))) scrollParent = this.parents().filter(function () { return /(relative|absolute|fixed)/.test($.css(this, "position")) && /(auto|scroll)/.test($.css(this, "overflow") + $.css(this, "overflow-y") + $.css(this, "overflow-x")) }).eq(0); else scrollParent = this.parents().filter(function () { return /(auto|scroll)/.test($.css(this, "overflow") + $.css(this, "overflow-y") + $.css(this, "overflow-x")) }).eq(0); return /fixed/.test(this.css("position")) || !scrollParent.length ? $(this[0].ownerDocument || document) : scrollParent }, uniqueId: function () { return this.each(function () { if (!this.id) this.id = "ui-id-" + ++uuid }) }, removeUniqueId: function () { return this.each(function () { runiqueId.test(this.id) && $(this).removeAttr("id") }) } }); function focusable(element, isTabIndexNotNaN) { var map, mapName, img, nodeName = element.nodeName.toLowerCase(); if ("area" === nodeName) { map = element.parentNode; mapName = map.name; if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") return false; img = $("img[usemap=#" + mapName + "]")[0]; return !!img && visible(img) } return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : "a" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element) } function visible(element) { return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function () { return $.css(this, "visibility") === "hidden" }).length } $.extend($.expr[":"], { data: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) { return function (elem) { return !!$.data(elem, dataName) } }) : function (elem, i, match) { return !!$.data(elem, match[3]) }, focusable: function (element) { return focusable(element, !isNaN($.attr(element, "tabindex"))) }, tabbable: function (element) { var tabIndex = $.attr(element, "tabindex"), isTabIndexNaN = isNaN(tabIndex); return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN) } }); !$("<a>").outerWidth(1).jquery && $.each(["Width", "Height"], function (i, name) { var side = name === "Width" ? ["Left", "Right"] : ["Top", "Bottom"], type = name.toLowerCase(), orig = { innerWidth: $.fn.innerWidth, innerHeight: $.fn.innerHeight, outerWidth: $.fn.outerWidth, outerHeight: $.fn.outerHeight }; function reduce(elem, size, border, margin) { $.each(side, function () { size -= parseFloat($.css(elem, "padding" + this)) || 0; if (border) size -= parseFloat($.css(elem, "border" + this + "Width")) || 0; if (margin) size -= parseFloat($.css(elem, "margin" + this)) || 0 }); return size } $.fn["inner" + name] = function (size) { if (size === undefined) return orig["inner" + name].call(this); return this.each(function () { $(this).css(type, reduce(this, size) + "px") }) }; $.fn["outer" + name] = function (size, margin) { if (typeof size !== "number") return orig["outer" + name].call(this, size); return this.each(function () { $(this).css(type, reduce(this, size, true, margin) + "px") }) } }); if (!$.fn.addBack) $.fn.addBack = function (selector) { return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector)) }; if ($("<a>").data("a-b", "a").removeData("a-b").data("a-b")) $.fn.removeData = function (removeData) { return function (key) { if (arguments.length) return removeData.call(this, $.camelCase(key)); else return removeData.call(this) } }($.fn.removeData); $.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()); $.support.selectstart = "onselectstart" in document.createElement("div"); $.fn.extend({ disableSelection: function () { return this.bind(($.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function (event) { }) }, enableSelection: function () { return this.unbind(".ui-disableSelection") }, zIndex: function (zIndex) { if (zIndex !== undefined) return this.css("zIndex", zIndex); if (this.length) { var elem = $(this[0]), position, value; while (elem.length && elem[0] !== document) { position = elem.css("position"); if (position === "absolute" || position === "relative" || position === "fixed") { value = parseInt(elem.css("zIndex"), 10); if (!isNaN(value) && value !== 0) return value } elem = elem.parent() } } return 0 } }); $.ui.plugin = { add: function (module, option, set) { var i, proto = $.ui[module].prototype; for (i in set) { proto.plugins[i] = proto.plugins[i] || []; proto.plugins[i].push([option, set[i]]) } }, call: function (instance, name, args, allowDisconnected) { var i, set = instance.plugins[name]; if (!set) return; if (!allowDisconnected && (!instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11)) return; for (i = 0; i < set.length; i++) instance.options[set[i][0]] && set[i][1].apply(instance.element, args) } } })(jQuery); (function ($, window, undefined) { var compensateToolbars = function (page, desiredHeight) { var pageParent = page.parent(), toolbarsAffectingHeight = [], externalHeaders = pageParent.children(":jqmData(role='header')"), internalHeaders = page.children(":jqmData(role='header')"), externalFooters = pageParent.children(":jqmData(role='footer')"), internalFooters = page.children(":jqmData(role='footer')"); if (internalHeaders.length === 0 && externalHeaders.length > 0) toolbarsAffectingHeight = toolbarsAffectingHeight.concat(externalHeaders.toArray()); if (internalFooters.length === 0 && externalFooters.length > 0) toolbarsAffectingHeight = toolbarsAffectingHeight.concat(externalFooters.toArray()); $.each(toolbarsAffectingHeight, function (index, value) { desiredHeight -= $(value).outerHeight() }); return Math.max(0, desiredHeight) }; $.extend($.mobile, { window: $(window), document: $(document), keyCode: $.ui.keyCode, behaviors: {}, silentScroll: function (ypos) { if ($.type(ypos) !== "number") ypos = $.mobile.defaultHomeScroll; $.event.special.scrollstart.enabled = false; setTimeout(function () { window.scrollTo(0, ypos); $.mobile.document.trigger("silentscroll", { x: 0, y: ypos }) }, 20); setTimeout(function () { $.event.special.scrollstart.enabled = true }, 150) }, getClosestBaseUrl: function (ele) { var url = $(ele).closest(".ui-page").jqmData("url"), base = $.mobile.path.documentBase.hrefNoHash; if (!$.mobile.dynamicBaseEnabled || !url || !$.mobile.path.isPath(url)) url = base; return $.mobile.path.makeUrlAbsolute(url, base) }, removeActiveLinkClass: function (forceRemoval) { !!$.mobile.activeClickedLink && (!$.mobile.activeClickedLink.closest("." + $.mobile.activePageClass).length || forceRemoval) && $.mobile.activeClickedLink.removeClass($.mobile.activeBtnClass); $.mobile.activeClickedLink = null }, getInheritedTheme: function (el, defaultTheme) { var e = el[0], ltr = "", re = /ui-(bar|body|overlay)-([a-z])\b/, c, m; while (e) { c = e.className || ""; if (c && (m = re.exec(c)) && (ltr = m[2])) break; e = e.parentNode } return ltr || defaultTheme || "a" }, enhanceable: function (elements) { return this.haveParents(elements, "enhance") }, hijackable: function (elements) { return this.haveParents(elements, "ajax") }, haveParents: function (elements, attr) { if (!$.mobile.ignoreContentEnabled) return elements; for (var count = elements.length, $newSet = $(), e, $element, excluded, c, i = 0; i < count; i++) { $element = elements.eq(i); excluded = false; e = elements[i]; while (e) { c = e.getAttribute ? e.getAttribute("data-" + $.mobile.ns + attr) : ""; if (c === "false") { excluded = true; break } e = e.parentNode } if (!excluded) $newSet = $newSet.add($element) } return $newSet }, getScreenHeight: function () { return window.innerHeight || $.mobile.window.height() }, resetActivePageHeight: function (height) { var page = $("." + $.mobile.activePageClass), pageHeight = page.height(), pageOuterHeight = page.outerHeight(true); height = compensateToolbars(page, typeof height === "number" ? height : $.mobile.getScreenHeight()); page.css("min-height", height - (pageOuterHeight - pageHeight)) }, loading: function () { var loader = this.loading._widget || $($.mobile.loader.prototype.defaultHtml).loader(), returnValue = loader.loader.apply(loader, arguments); this.loading._widget = loader; return returnValue } }); $.addDependents = function (elem, newDependents) { var $elem = $(elem), dependents = $elem.jqmData("dependents") || $(); $elem.jqmData("dependents", $(dependents).add(newDependents)) }; $.fn.extend({ removeWithDependents: function () { $.removeWithDependents(this) }, enhanceWithin: function () { var index, widgetElements = {}, keepNative = $.mobile.page.prototype.keepNativeSelector(), that = this; $.mobile.nojs && $.mobile.nojs(this); $.mobile.links && $.mobile.links(this); $.mobile.degradeInputsWithin && $.mobile.degradeInputsWithin(this); $.fn.buttonMarkup && this.find($.fn.buttonMarkup.initSelector).not(keepNative).jqmEnhanceable().buttonMarkup(); $.fn.fieldcontain && this.find(":jqmData(role='fieldcontain')").not(keepNative).jqmEnhanceable().fieldcontain(); $.each($.mobile.widgets, function (name, constructor) { if (constructor.initSelector) { var elements = $.mobile.enhanceable(that.find(constructor.initSelector)); if (elements.length > 0) elements = elements.not(keepNative); if (elements.length > 0) widgetElements[constructor.prototype.widgetName] = elements } }); for (index in widgetElements) widgetElements[index][index](); return this }, addDependents: function (newDependents) { $.addDependents(this, newDependents) }, getEncodedText: function () { return $("<a>").text(this.text()).html() }, jqmEnhanceable: function () { return $.mobile.enhanceable(this) }, jqmHijackable: function () { return $.mobile.hijackable(this) } }); $.removeWithDependents = function (nativeElement) { var element = $(nativeElement); (element.jqmData("dependents") || $()).remove(); element.remove() }; $.addDependents = function (nativeElement, newDependents) { var element = $(nativeElement), dependents = element.jqmData("dependents") || $(); element.jqmData("dependents", $(dependents).add(newDependents)) }; $.find.matches = function (expr, set) { return $.find(expr, null, null, set) }; $.find.matchesSelector = function (node, expr) { return $.find(expr, null, null, [node]).length > 0 } })(jQuery, this); (function ($) { var meta = $("meta[name=viewport]"), initialContent = meta.attr("content"), disabledZoom = initialContent + ",maximum-scale=1, user-scalable=no", enabledZoom = initialContent + ",maximum-scale=10, user-scalable=yes", disabledInitially = /(user-scalable[\s]*=[\s]*no)|(maximum-scale[\s]*=[\s]*1)[$,\s]/.test(initialContent); $.mobile.zoom = $.extend({}, { enabled: !disabledInitially, locked: false, disable: function (lock) { if (!disabledInitially && !$.mobile.zoom.locked) { meta.attr("content", disabledZoom); $.mobile.zoom.enabled = false; $.mobile.zoom.locked = lock || false } }, enable: function (unlock) { if (!disabledInitially && (!$.mobile.zoom.locked || unlock === true)) { meta.attr("content", enabledZoom); $.mobile.zoom.enabled = true; $.mobile.zoom.locked = false } }, restore: function () { if (!disabledInitially) { meta.attr("content", initialContent); $.mobile.zoom.enabled = true } } }) })(jQuery); (function ($, undefined) { $.mobile.behaviors.formReset = { _handleFormReset: function () { this._on(this.element.closest("form"), { reset: function () { this._delay("_reset") } }) } } })(jQuery); (function ($, undefined) { $.widget("mobile.flipswitch", $.extend({ options: { onText: "On", offText: "Off", theme: null, enhanced: false, wrapperClass: null, corners: true, mini: false }, _create: function () { if (!this.options.enhanced) this._enhance(); else $.extend(this, { flipswitch: this.element.parent(), on: this.element.find(".ui-flipswitch-on").eq(0), off: this.element.find(".ui-flipswitch-off").eq(0), type: this.element.get(0).tagName }); this._handleFormReset(); this._originalTabIndex = this.element.attr("tabindex"); this._originalTabIndex != null && this.on.attr("tabindex", this._originalTabIndex); this.element.attr("tabindex", "-1"); this._on({ focus: "_handleInputFocus" }); this.element.is(":disabled") && this._setOptions({ disabled: true }); this._on(this.flipswitch, { click: "_toggle", swipeleft: "_left", swiperight: "_right" }); this._on(this.on, { keydown: "_keydown" }); this._on({ change: "refresh" }) }, _handleInputFocus: function () { this.on.focus() }, widget: function () { return this.flipswitch }, _left: function () { this.flipswitch.removeClass("ui-flipswitch-active"); if (this.type === "SELECT") this.element.get(0).selectedIndex = 0; else this.element.prop("checked", false); this.element.trigger("change") }, _right: function () { this.flipswitch.addClass("ui-flipswitch-active"); if (this.type === "SELECT") this.element.get(0).selectedIndex = 1; else this.element.prop("checked", true); this.element.trigger("change") }, _enhance: function () { var flipswitch = $("<div>"), options = this.options, element = this.element, theme = options.theme ? options.theme : "inherit", on = $("<a></a>", { href: "#" }), off = $("<span></span>"), type = element.get(0).tagName, onText = type === "INPUT" ? options.onText : element.find("option").eq(1).text(), offText = type === "INPUT" ? options.offText : element.find("option").eq(0).text(); on.addClass("ui-flipswitch-on ui-btn ui-shadow ui-btn-inherit").text(onText); off.addClass("ui-flipswitch-off").text(offText); flipswitch.addClass("ui-flipswitch ui-shadow-inset ui-bar-" + theme + " " + (options.wrapperClass ? options.wrapperClass : "") + " " + (element.is(":checked") || element.find("option").eq(1).is(":selected") ? "ui-flipswitch-active" : "") + (element.is(":disabled") ? " ui-state-disabled" : "") + (options.corners ? " ui-corner-all" : "") + (options.mini ? " ui-mini" : "")).append(on, off); element.addClass("ui-flipswitch-input").after(flipswitch).appendTo(flipswitch); $.extend(this, { flipswitch: flipswitch, on: on, off: off, type: type }) }, _reset: function () { this.refresh() }, refresh: function () { var direction, existingDirection = this.flipswitch.hasClass("ui-flipswitch-active") ? "_right" : "_left"; if (this.type === "SELECT") direction = this.element.get(0).selectedIndex > 0 ? "_right" : "_left"; else direction = this.element.prop("checked") ? "_right" : "_left"; direction !== existingDirection && this[direction]() }, _toggle: function () { var direction = this.flipswitch.hasClass("ui-flipswitch-active") ? "_left" : "_right"; this[direction]() }, _keydown: function (e) { if (e.which === $.mobile.keyCode.LEFT) this._left(); else if (e.which === $.mobile.keyCode.RIGHT) this._right(); else if (e.which === $.mobile.keyCode.SPACE) { this._toggle(); e.preventDefault() } }, _setOptions: function (options) { if (options.theme !== undefined) { var currentTheme = options.theme ? options.theme : "inherit", newTheme = options.theme ? options.theme : "inherit"; this.widget().removeClass("ui-bar-" + currentTheme).addClass("ui-bar-" + newTheme) } options.onText !== undefined && this.on.text(options.onText); options.offText !== undefined && this.off.text(options.offText); options.disabled !== undefined && this.widget().toggleClass("ui-state-disabled", options.disabled); options.mini !== undefined && this.widget().toggleClass("ui-mini", options.mini); options.corners !== undefined && this.widget().toggleClass("ui-corner-all", options.corners); this._super(options) }, _destroy: function () { if (this.options.enhanced) return; if (this._originalTabIndex != null) this.element.attr("tabindex", this._originalTabIndex); else this.element.removeAttr("tabindex"); this.on.remove(); this.off.remove(); this.element.unwrap(); this.flipswitch.remove(); this.removeClass("ui-flipswitch-input") } }, $.mobile.behaviors.formReset)) })(jQuery) })