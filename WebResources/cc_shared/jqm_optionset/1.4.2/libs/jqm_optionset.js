/*
------------------------------------------- START OF THIRD PARTY NOTICE -----------------------------------------

This file is based on or incorporates material from the projects listed below (Third Party IP). The original copyright notice and the license under which Microsoft received such Third Party IP, are set forth below. Such licenses and notices are provided for informational purposes only. Microsoft licenses the Third Party IP to you under the licensing terms for the Microsoft product. Microsoft reserves all other rights not expressly granted under this agreement, whether by implication, estoppel or otherwise. 

jQuery Mobile 1.4.2
Copyright 2010, 2014 jQuery Foundation, Inc. and other contributors

Provided for Informational Purposes Only
MIT License 
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: 
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE 
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
----------------------------------------------- END OF THIRD PARTY NOTICE ------------------------------------------
*/
(function (root, doc, factory) { if (typeof define === "function" && define.amd) define(["jquery"], function ($) { factory($, root, doc); return $.mobile }); else factory(root.jQuery, root, doc) })(this, document, function (jQuery, window, document, undefined) { (function ($) { $.mobile = $.mobile || {} })(jQuery); (function ($, window, undefined) { var nsNormalizeDict = {}, oldFind = $.find, rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/, jqmDataRE = /:jqmData\(([^)]*)\)/g; $.extend($.mobile, { ns: "", getAttribute: function (element, key) { var data; element = element.jquery ? element[0] : element; if (element && element.getAttribute) data = element.getAttribute("data-" + $.mobile.ns + key); try { data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? JSON.parse(data) : data } catch (err) { } return data }, nsNormalizeDict: nsNormalizeDict, nsNormalize: function (prop) { return nsNormalizeDict[prop] || (nsNormalizeDict[prop] = $.camelCase($.mobile.ns + prop)) }, closestPageData: function ($target) { return $target.closest(":jqmData(role='page'), :jqmData(role='dialog')").data("mobile-page") } }); $.fn.jqmData = function (prop, value) { var result; if (typeof prop !== "undefined") { if (prop) prop = $.mobile.nsNormalize(prop); if (arguments.length < 2 || value === undefined) result = this.data(prop); else result = this.data(prop, value) } return result }; $.jqmData = function (elem, prop, value) { var result; if (typeof prop !== "undefined") result = $.data(elem, prop ? $.mobile.nsNormalize(prop) : prop, value); return result }; $.fn.jqmRemoveData = function (prop) { return this.removeData($.mobile.nsNormalize(prop)) }; $.jqmRemoveData = function (elem, prop) { return $.removeData(elem, $.mobile.nsNormalize(prop)) }; $.find = function (selector, context, ret, extra) { if (selector.indexOf(":jqmData") > -1) selector = selector.replace(jqmDataRE, "[data-" + ($.mobile.ns || "") + "$1]"); return oldFind.call(this, selector, context, ret, extra) }; $.extend($.find, oldFind) })(jQuery, this); (function ($, window, document, undefined) { var dataPropertyName = "virtualMouseBindings", touchTargetPropertyName = "virtualTouchID", virtualEventNames = "vmouseover vmousedown vmousemove vmouseup vclick vmouseout vmousecancel".split(" "), touchEventProps = "clientX clientY pageX pageY screenX screenY".split(" "), mouseHookProps = $.event.mouseHooks ? $.event.mouseHooks.props : [], mouseEventProps = $.event.props.concat(mouseHookProps), activeDocHandlers = {}, resetTimerID = 0, startX = 0, startY = 0, didScroll = false, clickBlockList = [], blockMouseTriggers = false, blockTouchTriggers = false, eventCaptureSupported = "addEventListener" in document, $document = $(document), nextTouchID = 1, lastTouchID = 0, threshold, i; $.vmouse = { moveDistanceThreshold: 10, clickDistanceThreshold: 10, resetTimerDuration: 1500 }; function getNativeEvent(event) { while (event && typeof event.originalEvent !== "undefined") event = event.originalEvent; return event } function createVirtualEvent(event, eventType) { var t = event.type, oe, props, ne, prop, ct, touch, i, j, len; event = $.Event(event); event.type = eventType; oe = event.originalEvent; props = $.event.props; if (t.search(/^(mouse|click)/) > -1) props = mouseEventProps; if (oe) for (i = props.length, prop; i;) { prop = props[--i]; event[prop] = oe[prop] } if (t.search(/mouse(down|up)|click/) > -1 && !event.which) event.which = 1; if (t.search(/^touch/) !== -1) { ne = getNativeEvent(oe); t = ne.touches; ct = ne.changedTouches; touch = t && t.length ? t[0] : ct && ct.length ? ct[0] : undefined; if (touch) for (j = 0, len = touchEventProps.length; j < len; j++) { prop = touchEventProps[j]; event[prop] = touch[prop] } } return event } function getVirtualBindingFlags(element) { var flags = {}, b, k; while (element) { b = $.data(element, dataPropertyName); for (k in b) if (b[k]) flags[k] = flags.hasVirtualBinding = true; element = element.parentNode } return flags } function getClosestElementWithVirtualBinding(element, eventType) { var b; while (element) { b = $.data(element, dataPropertyName); if (b && (!eventType || b[eventType])) return element; element = element.parentNode } return null } function enableTouchBindings() { blockTouchTriggers = false } function disableTouchBindings() { blockTouchTriggers = true } function enableMouseBindings() { lastTouchID = 0; clickBlockList.length = 0; blockMouseTriggers = false; disableTouchBindings() } function disableMouseBindings() { enableTouchBindings() } function startResetTimer() { clearResetTimer(); resetTimerID = setTimeout(function () { resetTimerID = 0; enableMouseBindings() }, $.vmouse.resetTimerDuration) } function clearResetTimer() { if (resetTimerID) { clearTimeout(resetTimerID); resetTimerID = 0 } } function triggerVirtualEvent(eventType, event, flags) { var ve; if (flags && flags[eventType] || !flags && getClosestElementWithVirtualBinding(event.target, eventType)) { ve = createVirtualEvent(event, eventType); $(event.target).trigger(ve) } return ve } function mouseEventCallback(event) { var touchID = $.data(event.target, touchTargetPropertyName), ve; !blockMouseTriggers && (!lastTouchID || lastTouchID !== touchID) && triggerVirtualEvent("v" + event.type, event) } function handleTouchStart(event) { var touches = getNativeEvent(event).touches, target, flags, t; if (touches && touches.length === 1) { target = event.target; flags = getVirtualBindingFlags(target); if (flags.hasVirtualBinding) { lastTouchID = nextTouchID++; $.data(target, touchTargetPropertyName, lastTouchID); clearResetTimer(); disableMouseBindings(); didScroll = false; t = getNativeEvent(event).touches[0]; startX = t.pageX; startY = t.pageY; triggerVirtualEvent("vmouseover", event, flags); triggerVirtualEvent("vmousedown", event, flags) } } } function handleScroll(event) { if (blockTouchTriggers) return; !didScroll && triggerVirtualEvent("vmousecancel", event, getVirtualBindingFlags(event.target)); didScroll = true; startResetTimer() } function handleTouchMove(event) { if (blockTouchTriggers) return; var t = getNativeEvent(event).touches[0], didCancel = didScroll, moveThreshold = $.vmouse.moveDistanceThreshold, flags = getVirtualBindingFlags(event.target); didScroll = didScroll || (Math.abs(t.pageX - startX) > moveThreshold || Math.abs(t.pageY - startY) > moveThreshold); didScroll && !didCancel && triggerVirtualEvent("vmousecancel", event, flags); triggerVirtualEvent("vmousemove", event, flags); startResetTimer() } function handleTouchEnd(event) { if (blockTouchTriggers) return; disableTouchBindings(); var flags = getVirtualBindingFlags(event.target), ve, t; triggerVirtualEvent("vmouseup", event, flags); if (!didScroll) { ve = triggerVirtualEvent("vclick", event, flags); if (ve && ve.isDefaultPrevented()) { t = getNativeEvent(event).changedTouches[0]; clickBlockList.push({ touchID: lastTouchID, x: t.clientX, y: t.clientY }); blockMouseTriggers = true } } triggerVirtualEvent("vmouseout", event, flags); didScroll = false; startResetTimer() } function hasVirtualBindings(ele) { var bindings = $.data(ele, dataPropertyName), k; if (bindings) for (k in bindings) if (bindings[k]) return true; return false } function dummyMouseHandler() { } function getSpecialEventObject(eventType) { var realType = eventType.substr(1); return { setup: function () { !hasVirtualBindings(this) && $.data(this, dataPropertyName, {}); var bindings = $.data(this, dataPropertyName); bindings[eventType] = true; activeDocHandlers[eventType] = (activeDocHandlers[eventType] || 0) + 1; activeDocHandlers[eventType] === 1 && $document.bind(realType, mouseEventCallback); $(this).bind(realType, dummyMouseHandler); if (eventCaptureSupported && navigator.userAgent.indexOf("Windows Phone") === -1) { activeDocHandlers["touchstart"] = (activeDocHandlers["touchstart"] || 0) + 1; activeDocHandlers["touchstart"] === 1 && $document.bind("touchstart", handleTouchStart).bind("touchend", handleTouchEnd).bind("touchmove", handleTouchMove).bind("scroll", handleScroll) } }, teardown: function () { --activeDocHandlers[eventType]; !activeDocHandlers[eventType] && $document.unbind(realType, mouseEventCallback); if (eventCaptureSupported && navigator.userAgent.indexOf("Windows Phone") === -1) { --activeDocHandlers["touchstart"]; !activeDocHandlers["touchstart"] && $document.unbind("touchstart", handleTouchStart).unbind("touchmove", handleTouchMove).unbind("touchend", handleTouchEnd).unbind("scroll", handleScroll) } var $this = $(this), bindings = $.data(this, dataPropertyName); if (bindings) bindings[eventType] = false; $this.unbind(realType, dummyMouseHandler); !hasVirtualBindings(this) && $this.removeData(dataPropertyName) } } } for (i = 0; i < virtualEventNames.length; i++) $.event.special[virtualEventNames[i]] = getSpecialEventObject(virtualEventNames[i]); eventCaptureSupported && document.addEventListener("click", function (e) { var cnt = clickBlockList.length, target = e.target, x, y, ele, i, o, touchID; if (cnt) { x = e.clientX; y = e.clientY; threshold = $.vmouse.clickDistanceThreshold; ele = target; while (ele) { for (i = 0; i < cnt; i++) { o = clickBlockList[i]; touchID = 0; if (ele === target && Math.abs(o.x - x) < threshold && Math.abs(o.y - y) < threshold || $.data(ele, touchTargetPropertyName) === o.touchID) return } ele = ele.parentNode } } }, true) })(jQuery, window, document); (function ($, undefined) { var uuid = 0, slice = Array.prototype.slice, _cleanData = $.cleanData; $.cleanData = function (elems) { for (var i = 0, elem; (elem = elems[i]) != null; i++) try { $(elem).triggerHandler("remove") } catch (e) { } _cleanData(elems) }; $.widget = function (name, base, prototype) { var fullName, existingConstructor, constructor, basePrototype, proxiedPrototype = {}, namespace = name.split(".")[0]; name = name.split(".")[1]; fullName = namespace + "-" + name; if (!prototype) { prototype = base; base = $.Widget } $.expr[":"][fullName.toLowerCase()] = function (elem) { return !!$.data(elem, fullName) }; $[namespace] = $[namespace] || {}; existingConstructor = $[namespace][name]; constructor = $[namespace][name] = function (options, element) { if (!this._createWidget) return new constructor(options, element); arguments.length && this._createWidget(options, element) }; $.extend(constructor, existingConstructor, { version: prototype.version, _proto: $.extend({}, prototype), _childConstructors: [] }); basePrototype = new base; basePrototype.options = $.widget.extend({}, basePrototype.options); $.each(prototype, function (prop, value) { if (!$.isFunction(value)) { proxiedPrototype[prop] = value; return } proxiedPrototype[prop] = function () { var _super = function () { return base.prototype[prop].apply(this, arguments) }, _superApply = function (args) { return base.prototype[prop].apply(this, args) }; return function () { var __super = this._super, __superApply = this._superApply, returnValue; this._super = _super; this._superApply = _superApply; returnValue = value.apply(this, arguments); this._super = __super; this._superApply = __superApply; return returnValue } }() }); constructor.prototype = $.widget.extend(basePrototype, { widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix || name : name }, proxiedPrototype, { constructor: constructor, "namespace": namespace, widgetName: name, widgetFullName: fullName }); if (existingConstructor) { $.each(existingConstructor._childConstructors, function (i, child) { var childPrototype = child.prototype; $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto) }); delete existingConstructor._childConstructors } else base._childConstructors.push(constructor); $.widget.bridge(name, constructor); return constructor }; $.widget.extend = function (target) { for (var input = slice.call(arguments, 1), inputIndex = 0, inputLength = input.length, key, value; inputIndex < inputLength; inputIndex++) for (key in input[inputIndex]) { value = input[inputIndex][key]; if (input[inputIndex].hasOwnProperty(key) && value !== undefined) if ($.isPlainObject(value)) target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : $.widget.extend({}, value); else target[key] = value } return target }; $.widget.bridge = function (name, object) { var fullName = object.prototype.widgetFullName || name; $.fn[name] = function (options) { var isMethodCall = typeof options === "string", args = slice.call(arguments, 1), returnValue = this; options = !isMethodCall && args.length ? $.widget.extend.apply(null, [options].concat(args)) : options; if (isMethodCall) this.each(function () { var methodValue, instance = $.data(this, fullName); if (options === "instance") { returnValue = instance; return false } if (!instance) return $.error("cannot call methods on " + name + " prior to initialization; attempted to call method '" + options + "'"); if (!$.isFunction(instance[options]) || options.charAt(0) === "_") return $.error("no such method '" + options + "' for " + name + " widget instance"); methodValue = instance[options].apply(instance, args); if (methodValue !== instance && methodValue !== undefined) { returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue; return false } }); else this.each(function () { var instance = $.data(this, fullName); if (instance) instance.option(options || {})._init(); else $.data(this, fullName, new object(options, this)) }); return returnValue } }; $.Widget = function () { }; $.Widget._childConstructors = []; $.Widget.prototype = { widgetName: "widget", widgetEventPrefix: "", defaultElement: "<div>", options: { disabled: false, create: null }, _createWidget: function (options, element) { element = $(element || this.defaultElement || this)[0]; this.element = $(element); this.uuid = uuid++; this.eventNamespace = "." + this.widgetName + this.uuid; this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options); this.bindings = $(); this.hoverable = $(); this.focusable = $(); if (element !== this) { $.data(element, this.widgetFullName, this); this._on(true, this.element, { remove: function (event) { event.target === element && this.destroy() } }); this.document = $(element.style ? element.ownerDocument : element.document || element); this.window = $(this.document[0].defaultView || this.document[0].parentWindow) } this._create(); this._trigger("create", null, this._getCreateEventData()); this._init() }, _getCreateOptions: $.noop, _getCreateEventData: $.noop, _create: $.noop, _init: $.noop, destroy: function () { this._destroy(); this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData($.camelCase(this.widgetFullName)); this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled ui-state-disabled"); this.bindings.unbind(this.eventNamespace); this.hoverable.removeClass("ui-state-hover"); this.focusable.removeClass("ui-state-focus") }, _destroy: $.noop, widget: function () { return this.element }, option: function (key, value) { var options = key, parts, curOption, i; if (arguments.length === 0) return $.widget.extend({}, this.options); if (typeof key === "string") { options = {}; parts = key.split("."); key = parts.shift(); if (parts.length) { curOption = options[key] = $.widget.extend({}, this.options[key]); for (i = 0; i < parts.length - 1; i++) { curOption[parts[i]] = curOption[parts[i]] || {}; curOption = curOption[parts[i]] } key = parts.pop(); if (value === undefined) return curOption[key] === undefined ? null : curOption[key]; curOption[key] = value } else { if (value === undefined) return this.options[key] === undefined ? null : this.options[key]; options[key] = value } } this._setOptions(options); return this }, _setOptions: function (options) { var key; for (key in options) this._setOption(key, options[key]); return this }, _setOption: function (key, value) { this.options[key] = value; if (key === "disabled") { this.widget().toggleClass(this.widgetFullName + "-disabled", !!value); this.hoverable.removeClass("ui-state-hover"); this.focusable.removeClass("ui-state-focus") } return this }, enable: function () { return this._setOptions({ disabled: false }) }, disable: function () { return this._setOptions({ disabled: true }) }, _on: function (suppressDisabledCheck, element, handlers) { var delegateElement, instance = this; if (typeof suppressDisabledCheck !== "boolean") { handlers = element; element = suppressDisabledCheck; suppressDisabledCheck = false } if (!handlers) { handlers = element; element = this.element; delegateElement = this.widget() } else { element = delegateElement = $(element); this.bindings = this.bindings.add(element) } $.each(handlers, function (event, handler) { function handlerProxy() { if (!suppressDisabledCheck && (instance.options.disabled === true || $(this).hasClass("ui-state-disabled"))) return; return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments) } if (typeof handler !== "string") handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++; var match = event.match(/^(\w+)\s*(.*)$/), eventName = match[1] + instance.eventNamespace, selector = match[2]; if (selector) delegateElement.delegate(selector, eventName, handlerProxy); else element.bind(eventName, handlerProxy) }) }, _off: function (element, eventName) { eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace; element.unbind(eventName).undelegate(eventName) }, _delay: function (handler, delay) { function handlerProxy() { return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments) } var instance = this; return setTimeout(handlerProxy, delay || 0) }, _hoverable: function (element) { this.hoverable = this.hoverable.add(element); this._on(element, { mouseenter: function (event) { $(event.currentTarget).addClass("ui-state-hover") }, mouseleave: function (event) { $(event.currentTarget).removeClass("ui-state-hover") } }) }, _focusable: function (element) { this.focusable = this.focusable.add(element); this._on(element, { focusin: function (event) { $(event.currentTarget).addClass("ui-state-focus") }, focusout: function (event) { $(event.currentTarget).removeClass("ui-state-focus") } }) }, _trigger: function (type, event, data) { var prop, orig, callback = this.options[type]; data = data || {}; event = $.Event(event); event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase(); event.target = this.element[0]; orig = event.originalEvent; if (orig) for (prop in orig) if (!(prop in event)) event[prop] = orig[prop]; this.element.trigger(event, data); return !($.isFunction(callback) && callback.apply(this.element[0], [event].concat(data)) === false || event.isDefaultPrevented()) } }; $.each({ show: "fadeIn", hide: "fadeOut" }, function (method, defaultEffect) { $.Widget.prototype["_" + method] = function (element, options, callback) { if (typeof options === "string") options = { effect: options }; var hasOptions, effectName = !options ? method : options === true || typeof options === "number" ? defaultEffect : options.effect || defaultEffect; options = options || {}; if (typeof options === "number") options = { duration: options }; hasOptions = !$.isEmptyObject(options); options.complete = callback; options.delay && element.delay(options.delay); if (hasOptions && $.effects && $.effects.effect[effectName]) element[method](options); else if (effectName !== method && element[effectName]) element[effectName](options.duration, options.easing, callback); else element.queue(function (next) { $(this)[method](); callback && callback.call(element[0]); next() }) } }) })(jQuery); (function ($, undefined) { var rcapitals = /[A-Z]/g, replaceFunction = function (c) { return "-" + c.toLowerCase() }; $.extend($.Widget.prototype, { _getCreateOptions: function () { var option, value, elem = this.element[0], options = {}; if (!$.mobile.getAttribute(elem, "defaults")) for (option in this.options) { value = $.mobile.getAttribute(elem, option.replace(rcapitals, replaceFunction)); if (value != null) options[option] = value } return options } }); $.mobile.widget = $.Widget })(jQuery); (function ($, undefined) { var path, $base, dialogHashKey = "&ui-state=dialog"; $.mobile.path = path = { uiStateKey: "&ui-state", urlParseRE: /^\s*(((([^:\/#\?]+:)?(?:(\/\/)((?:(([^:@\/#\?]+)(?:\:([^:@\/#\?]+))?)@)?(([^:\/#\?\]\[]+|\[[^\/\]@#?]+\])(?:\:([0-9]+))?))?)?)?((\/?(?:[^\/\?#]+\/+)*)([^\?#]*)))?(\?[^#]+)?)(#.*)?/, getLocation: function (url) { var uri = url ? this.parseUrl(url) : location, hash = this.parseUrl(url || location.href).hash; hash = hash === "#" ? "" : hash; return uri.protocol + "//" + uri.host + uri.pathname + uri.search + hash }, getDocumentUrl: function (asParsedObject) { return asParsedObject ? $.extend({}, path.documentUrl) : path.documentUrl.href }, parseLocation: function () { return this.parseUrl(this.getLocation()) }, parseUrl: function (url) { if ($.type(url) === "object") return url; var matches = path.urlParseRE.exec(url || "") || []; return { href: matches[0] || "", hrefNoHash: matches[1] || "", hrefNoSearch: matches[2] || "", domain: matches[3] || "", protocol: matches[4] || "", doubleSlash: matches[5] || "", authority: matches[6] || "", username: matches[8] || "", password: matches[9] || "", host: matches[10] || "", hostname: matches[11] || "", port: matches[12] || "", pathname: matches[13] || "", directory: matches[14] || "", filename: matches[15] || "", search: matches[16] || "", hash: matches[17] || "" } }, makePathAbsolute: function (relPath, absPath) { var absStack, relStack, i, d; if (relPath && relPath.charAt(0) === "/") return relPath; relPath = relPath || ""; absPath = absPath ? absPath.replace(/^\/|(\/[^\/]*|[^\/]+)$/g, "") : ""; absStack = absPath ? absPath.split("/") : []; relStack = relPath.split("/"); for (i = 0; i < relStack.length; i++) { d = relStack[i]; switch (d) { case ".": break; case "..": absStack.length && absStack.pop(); break; default: absStack.push(d); break } } return "/" + absStack.join("/") }, isSameDomain: function (absUrl1, absUrl2) { return path.parseUrl(absUrl1).domain === path.parseUrl(absUrl2).domain }, isRelativeUrl: function (url) { return path.parseUrl(url).protocol === "" }, isAbsoluteUrl: function (url) { return path.parseUrl(url).protocol !== "" }, makeUrlAbsolute: function (relUrl, absUrl) { if (!path.isRelativeUrl(relUrl)) return relUrl; if (absUrl === undefined) absUrl = this.documentBase; var relObj = path.parseUrl(relUrl), absObj = path.parseUrl(absUrl), protocol = relObj.protocol || absObj.protocol, doubleSlash = relObj.protocol ? relObj.doubleSlash : relObj.doubleSlash || absObj.doubleSlash, authority = relObj.authority || absObj.authority, hasPath = relObj.pathname !== "", pathname = path.makePathAbsolute(relObj.pathname || absObj.filename, absObj.pathname), search = relObj.search || !hasPath && absObj.search || "", hash = relObj.hash; return protocol + doubleSlash + authority + pathname + search + hash }, addSearchParams: function (url, params) { var u = path.parseUrl(url), p = typeof params === "object" ? $.param(params) : params, s = u.search || "?"; return u.hrefNoSearch + s + (s.charAt(s.length - 1) !== "?" ? "&" : "") + p + (u.hash || "") }, convertUrlToDataUrl: function (absUrl) { var u = path.parseUrl(absUrl); if (path.isEmbeddedPage(u)) return u.hash.split(dialogHashKey)[0].replace(/^#/, "").replace(/\?.*$/, ""); else if (path.isSameDomain(u, this.documentBase)) return u.hrefNoHash.replace(this.documentBase.domain, "").split(dialogHashKey)[0]; return window.decodeURIComponent(absUrl) }, "get": function (newPath) { if (newPath === undefined) newPath = path.parseLocation().hash; return path.stripHash(newPath).replace(/[^\/]*\.[^\/*]+$/, "") }, "set": function (path) { location.hash = path }, isPath: function (url) { return /\//.test(url) }, clean: function (url) { return url.replace(this.documentBase.domain, "") }, stripHash: function (url) { return url.replace(/^#/, "") }, stripQueryParams: function (url) { return url.replace(/\?.*$/, "") }, cleanHash: function (hash) { return path.stripHash(hash.replace(/\?.*$/, "").replace(dialogHashKey, "")) }, isHashValid: function (hash) { return /^#[^#]+$/.test(hash) }, isExternal: function (url) { var u = path.parseUrl(url); return u.protocol && u.domain !== this.documentUrl.domain ? true : false }, hasProtocol: function (url) { return /^(:?\w+:)/.test(url) }, isEmbeddedPage: function (url) { var u = path.parseUrl(url); if (u.protocol !== "") return !this.isPath(u.hash) && u.hash && (u.hrefNoHash === this.documentUrl.hrefNoHash || this.documentBaseDiffers && u.hrefNoHash === this.documentBase.hrefNoHash); return /^#/.test(u.href) }, squash: function (url, resolutionUrl) { var href, cleanedUrl, search, stateIndex, isPath = this.isPath(url), uri = this.parseUrl(url), preservedHash = uri.hash, uiState = ""; resolutionUrl = resolutionUrl || (path.isPath(url) ? path.getLocation() : path.getDocumentUrl()); cleanedUrl = isPath ? path.stripHash(url) : url; cleanedUrl = path.isPath(uri.hash) ? path.stripHash(uri.hash) : cleanedUrl; stateIndex = cleanedUrl.indexOf(this.uiStateKey); if (stateIndex > -1) { uiState = cleanedUrl.slice(stateIndex); cleanedUrl = cleanedUrl.slice(0, stateIndex) } href = path.makeUrlAbsolute(cleanedUrl, resolutionUrl); search = this.parseUrl(href).search; if (isPath) { if (path.isPath(preservedHash) || preservedHash.replace("#", "").indexOf(this.uiStateKey) === 0) preservedHash = ""; if (uiState && preservedHash.indexOf(this.uiStateKey) === -1) preservedHash += uiState; if (preservedHash.indexOf("#") === -1 && preservedHash !== "") preservedHash = "#" + preservedHash; href = path.parseUrl(href); href = href.protocol + "//" + href.host + href.pathname + search + preservedHash } else href += href.indexOf("#") > -1 ? uiState : "#" + uiState; return href }, isPreservableHash: function (hash) { return hash.replace("#", "").indexOf(this.uiStateKey) === 0 }, hashToSelector: function (hash) { var hasHash = hash.substring(0, 1) === "#"; if (hasHash) hash = hash.substring(1); return (hasHash ? "#" : "") + hash.replace(/([!"#$%&'()*+,./:;<=>?@[\]^`{|}~])/g, "\\$1") }, getFilePath: function (path) { var splitkey = "&" + $.mobile.subPageUrlKey; return path && path.split(splitkey)[0].split(dialogHashKey)[0] }, isFirstPageUrl: function (url) { var u = path.parseUrl(path.makeUrlAbsolute(url, this.documentBase)), samePath = u.hrefNoHash === this.documentUrl.hrefNoHash || this.documentBaseDiffers && u.hrefNoHash === this.documentBase.hrefNoHash, fp = $.mobile.firstPage, fpId = fp && fp[0] ? fp[0].id : undefined; return samePath && (!u.hash || u.hash === "#" || fpId && u.hash.replace(/^#/, "") === fpId) }, isPermittedCrossDomainRequest: function (docUrl, reqUrl) { return $.mobile.allowCrossDomainPages && (docUrl.protocol === "file:" || docUrl.protocol === "content:") && reqUrl.search(/^https?:/) !== -1 } }; path.documentUrl = path.parseLocation(); $base = $("head").find("base"); path.documentBase = $base.length ? path.parseUrl(path.makeUrlAbsolute($base.attr("href"), path.documentUrl.href)) : path.documentUrl; path.documentBaseDiffers = path.documentUrl.hrefNoHash !== path.documentBase.hrefNoHash; path.getDocumentBase = function (asParsedObject) { return asParsedObject ? $.extend({}, path.documentBase) : path.documentBase.href }; $.extend($.mobile, { getDocumentUrl: path.getDocumentUrl, getDocumentBase: path.getDocumentBase }) })(jQuery); (function ($, window, undefined) { $.extend($.mobile, { version: "1.4.2", subPageUrlKey: "ui-page", hideUrlBar: true, keepNative: ":jqmData(role='none'), :jqmData(role='nojs')", activePageClass: "ui-page-active", activeBtnClass: "ui-btn-active", focusClass: "ui-focus", ajaxEnabled: true, hashListeningEnabled: true, linkBindingEnabled: true, defaultPageTransition: "fade", maxTransitionWidth: false, minScrollBack: 0, defaultDialogTransition: "pop", pageLoadErrorMessage: "Error Loading Page", pageLoadErrorMessageTheme: "a", phonegapNavigationEnabled: false, autoInitializePage: true, pushStateEnabled: true, ignoreContentEnabled: false, buttonMarkup: { hoverDelay: 200 }, dynamicBaseEnabled: true, pageContainer: $(), allowCrossDomainPages: false, dialogHashKey: "&ui-state=dialog" }) })(jQuery, this); (function ($, undefined) { var uuid = 0, runiqueId = /^ui-id-\d+$/; $.ui = $.ui || {}; $.extend($.ui, { version: "c0ab71056b936627e8a7821f03c044aec6280a40", keyCode: { BACKSPACE: 8, COMMA: 188, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, LEFT: 37, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SPACE: 32, TAB: 9, UP: 38 } }); $.fn.extend({ focus: function (orig) { return function (delay, fn) { return typeof delay === "number" ? this.each(function () { var elem = this; setTimeout(function () { $(elem).focus(); fn && fn.call(elem) }, delay) }) : orig.apply(this, arguments) } }($.fn.focus), scrollParent: function () { var scrollParent; if ($.ui.ie && /(static|relative)/.test(this.css("position")) || /absolute/.test(this.css("position"))) scrollParent = this.parents().filter(function () { return /(relative|absolute|fixed)/.test($.css(this, "position")) && /(auto|scroll)/.test($.css(this, "overflow") + $.css(this, "overflow-y") + $.css(this, "overflow-x")) }).eq(0); else scrollParent = this.parents().filter(function () { return /(auto|scroll)/.test($.css(this, "overflow") + $.css(this, "overflow-y") + $.css(this, "overflow-x")) }).eq(0); return /fixed/.test(this.css("position")) || !scrollParent.length ? $(this[0].ownerDocument || document) : scrollParent }, uniqueId: function () { return this.each(function () { if (!this.id) this.id = "ui-id-" + ++uuid }) }, removeUniqueId: function () { return this.each(function () { runiqueId.test(this.id) && $(this).removeAttr("id") }) } }); function focusable(element, isTabIndexNotNaN) { var map, mapName, img, nodeName = element.nodeName.toLowerCase(); if ("area" === nodeName) { map = element.parentNode; mapName = map.name; if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") return false; img = $("img[usemap=#" + mapName + "]")[0]; return !!img && visible(img) } return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : "a" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element) } function visible(element) { return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function () { return $.css(this, "visibility") === "hidden" }).length } $.extend($.expr[":"], { data: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) { return function (elem) { return !!$.data(elem, dataName) } }) : function (elem, i, match) { return !!$.data(elem, match[3]) }, focusable: function (element) { return focusable(element, !isNaN($.attr(element, "tabindex"))) }, tabbable: function (element) { var tabIndex = $.attr(element, "tabindex"), isTabIndexNaN = isNaN(tabIndex); return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN) } }); !$("<a>").outerWidth(1).jquery && $.each(["Width", "Height"], function (i, name) { var side = name === "Width" ? ["Left", "Right"] : ["Top", "Bottom"], type = name.toLowerCase(), orig = { innerWidth: $.fn.innerWidth, innerHeight: $.fn.innerHeight, outerWidth: $.fn.outerWidth, outerHeight: $.fn.outerHeight }; function reduce(elem, size, border, margin) { $.each(side, function () { size -= parseFloat($.css(elem, "padding" + this)) || 0; if (border) size -= parseFloat($.css(elem, "border" + this + "Width")) || 0; if (margin) size -= parseFloat($.css(elem, "margin" + this)) || 0 }); return size } $.fn["inner" + name] = function (size) { if (size === undefined) return orig["inner" + name].call(this); return this.each(function () { $(this).css(type, reduce(this, size) + "px") }) }; $.fn["outer" + name] = function (size, margin) { if (typeof size !== "number") return orig["outer" + name].call(this, size); return this.each(function () { $(this).css(type, reduce(this, size, true, margin) + "px") }) } }); if (!$.fn.addBack) $.fn.addBack = function (selector) { return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector)) }; if ($("<a>").data("a-b", "a").removeData("a-b").data("a-b")) $.fn.removeData = function (removeData) { return function (key) { if (arguments.length) return removeData.call(this, $.camelCase(key)); else return removeData.call(this) } }($.fn.removeData); $.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()); $.support.selectstart = "onselectstart" in document.createElement("div"); $.fn.extend({ disableSelection: function () { return this.bind(($.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function (event) { }) }, enableSelection: function () { return this.unbind(".ui-disableSelection") }, zIndex: function (zIndex) { if (zIndex !== undefined) return this.css("zIndex", zIndex); if (this.length) { var elem = $(this[0]), position, value; while (elem.length && elem[0] !== document) { position = elem.css("position"); if (position === "absolute" || position === "relative" || position === "fixed") { value = parseInt(elem.css("zIndex"), 10); if (!isNaN(value) && value !== 0) return value } elem = elem.parent() } } return 0 } }); $.ui.plugin = { add: function (module, option, set) { var i, proto = $.ui[module].prototype; for (i in set) { proto.plugins[i] = proto.plugins[i] || []; proto.plugins[i].push([option, set[i]]) } }, call: function (instance, name, args, allowDisconnected) { var i, set = instance.plugins[name]; if (!set) return; if (!allowDisconnected && (!instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11)) return; for (i = 0; i < set.length; i++) instance.options[set[i][0]] && set[i][1].apply(instance.element, args) } } })(jQuery); (function ($, window, undefined) { var compensateToolbars = function (page, desiredHeight) { var pageParent = page.parent(), toolbarsAffectingHeight = [], externalHeaders = pageParent.children(":jqmData(role='header')"), internalHeaders = page.children(":jqmData(role='header')"), externalFooters = pageParent.children(":jqmData(role='footer')"), internalFooters = page.children(":jqmData(role='footer')"); if (internalHeaders.length === 0 && externalHeaders.length > 0) toolbarsAffectingHeight = toolbarsAffectingHeight.concat(externalHeaders.toArray()); if (internalFooters.length === 0 && externalFooters.length > 0) toolbarsAffectingHeight = toolbarsAffectingHeight.concat(externalFooters.toArray()); $.each(toolbarsAffectingHeight, function (index, value) { desiredHeight -= $(value).outerHeight() }); return Math.max(0, desiredHeight) }; $.extend($.mobile, { window: $(window), document: $(document), keyCode: $.ui.keyCode, behaviors: {}, silentScroll: function (ypos) { if ($.type(ypos) !== "number") ypos = $.mobile.defaultHomeScroll; $.event.special.scrollstart.enabled = false; setTimeout(function () { window.scrollTo(0, ypos); $.mobile.document.trigger("silentscroll", { x: 0, y: ypos }) }, 20); setTimeout(function () { $.event.special.scrollstart.enabled = true }, 150) }, getClosestBaseUrl: function (ele) { var url = $(ele).closest(".ui-page").jqmData("url"), base = $.mobile.path.documentBase.hrefNoHash; if (!$.mobile.dynamicBaseEnabled || !url || !$.mobile.path.isPath(url)) url = base; return $.mobile.path.makeUrlAbsolute(url, base) }, removeActiveLinkClass: function (forceRemoval) { !!$.mobile.activeClickedLink && (!$.mobile.activeClickedLink.closest("." + $.mobile.activePageClass).length || forceRemoval) && $.mobile.activeClickedLink.removeClass($.mobile.activeBtnClass); $.mobile.activeClickedLink = null }, getInheritedTheme: function (el, defaultTheme) { var e = el[0], ltr = "", re = /ui-(bar|body|overlay)-([a-z])\b/, c, m; while (e) { c = e.className || ""; if (c && (m = re.exec(c)) && (ltr = m[2])) break; e = e.parentNode } return ltr || defaultTheme || "a" }, enhanceable: function (elements) { return this.haveParents(elements, "enhance") }, hijackable: function (elements) { return this.haveParents(elements, "ajax") }, haveParents: function (elements, attr) { if (!$.mobile.ignoreContentEnabled) return elements; for (var count = elements.length, $newSet = $(), e, $element, excluded, c, i = 0; i < count; i++) { $element = elements.eq(i); excluded = false; e = elements[i]; while (e) { c = e.getAttribute ? e.getAttribute("data-" + $.mobile.ns + attr) : ""; if (c === "false") { excluded = true; break } e = e.parentNode } if (!excluded) $newSet = $newSet.add($element) } return $newSet }, getScreenHeight: function () { return window.innerHeight || $.mobile.window.height() }, resetActivePageHeight: function (height) { var page = $("." + $.mobile.activePageClass), pageHeight = page.height(), pageOuterHeight = page.outerHeight(true); height = compensateToolbars(page, typeof height === "number" ? height : $.mobile.getScreenHeight()); page.css("min-height", height - (pageOuterHeight - pageHeight)) }, loading: function () { var loader = this.loading._widget || $($.mobile.loader.prototype.defaultHtml).loader(), returnValue = loader.loader.apply(loader, arguments); this.loading._widget = loader; return returnValue } }); $.addDependents = function (elem, newDependents) { var $elem = $(elem), dependents = $elem.jqmData("dependents") || $(); $elem.jqmData("dependents", $(dependents).add(newDependents)) }; $.fn.extend({ removeWithDependents: function () { $.removeWithDependents(this) }, enhanceWithin: function () { var index, widgetElements = {}, keepNative = $.mobile.page.prototype.keepNativeSelector(), that = this; $.mobile.nojs && $.mobile.nojs(this); $.mobile.links && $.mobile.links(this); $.mobile.degradeInputsWithin && $.mobile.degradeInputsWithin(this); $.fn.buttonMarkup && this.find($.fn.buttonMarkup.initSelector).not(keepNative).jqmEnhanceable().buttonMarkup(); $.fn.fieldcontain && this.find(":jqmData(role='fieldcontain')").not(keepNative).jqmEnhanceable().fieldcontain(); $.each($.mobile.widgets, function (name, constructor) { if (constructor.initSelector) { var elements = $.mobile.enhanceable(that.find(constructor.initSelector)); if (elements.length > 0) elements = elements.not(keepNative); if (elements.length > 0) widgetElements[constructor.prototype.widgetName] = elements } }); for (index in widgetElements) widgetElements[index][index](); return this }, addDependents: function (newDependents) { $.addDependents(this, newDependents) }, getEncodedText: function () { return $("<a>").text(this.text()).html() }, jqmEnhanceable: function () { return $.mobile.enhanceable(this) }, jqmHijackable: function () { return $.mobile.hijackable(this) } }); $.removeWithDependents = function (nativeElement) { var element = $(nativeElement); (element.jqmData("dependents") || $()).remove(); element.remove() }; $.addDependents = function (nativeElement, newDependents) { var element = $(nativeElement), dependents = element.jqmData("dependents") || $(); element.jqmData("dependents", $(dependents).add(newDependents)) }; $.find.matches = function (expr, set) { return $.find(expr, null, null, set) }; $.find.matchesSelector = function (node, expr) { return $.find(expr, null, null, [node]).length > 0 } })(jQuery, this); (function ($, undefined) { $.mobile.behaviors.addFirstLastClasses = { _getVisibles: function ($els, create) { var visibles; if (create) visibles = $els.not(".ui-screen-hidden"); else { visibles = $els.filter(":visible"); if (visibles.length === 0) visibles = $els.not(".ui-screen-hidden") } return visibles }, _addFirstLastClasses: function ($els, $visibles, create) { $els.removeClass("ui-first-child ui-last-child"); $visibles.eq(0).addClass("ui-first-child").end().last().addClass("ui-last-child"); !create && this.element.trigger("updatelayout") }, _removeFirstLastClasses: function ($els) { $els.removeClass("ui-first-child ui-last-child") } } })(jQuery); (function ($, undefined) { $.widget("mobile.controlgroup", $.extend({ options: { enhanced: false, theme: null, shadow: false, corners: true, excludeInvisible: true, type: "vertical", mini: false }, _create: function () { var elem = this.element, opts = this.options; $.fn.buttonMarkup && this.element.find($.fn.buttonMarkup.initSelector).buttonMarkup(); $.extend(this, { _ui: null, _initialRefresh: true }); if (opts.enhanced) this._ui = { groupLegend: elem.children(".ui-controlgroup-label").children(), childWrapper: elem.children(".ui-controlgroup-controls") }; else this._ui = this._enhance() }, _childWidgets: ["checkboxradio", "selectmenu", "button"], _themeClassFromOption: function (value) { return value ? value === "none" ? "" : "ui-group-theme-" + value : "" }, _enhance: function () { var elem = this.element, opts = this.options, ui = { groupLegend: elem.children("legend"), childWrapper: elem.addClass("ui-controlgroup ui-controlgroup-" + (opts.type === "horizontal" ? "horizontal" : "vertical") + " " + this._themeClassFromOption(opts.theme) + " " + (opts.corners ? "ui-corner-all " : "") + (opts.mini ? "ui-mini " : "")).wrapInner("<div class='ui-controlgroup-controls " + (opts.shadow === true ? "ui-shadow" : "") + "'></div>").children() }; ui.groupLegend.length > 0 && $("<div role='heading' class='ui-controlgroup-label'></div>").append(ui.groupLegend).prependTo(elem); return ui }, _init: function () { this.refresh() }, _setOptions: function (options) { var callRefresh, returnValue, elem = this.element; if (options.type !== undefined) { elem.removeClass("ui-controlgroup-horizontal ui-controlgroup-vertical").addClass("ui-controlgroup-" + (options.type === "horizontal" ? "horizontal" : "vertical")); callRefresh = true } options.theme !== undefined && elem.removeClass(this._themeClassFromOption(this.options.theme)).addClass(this._themeClassFromOption(options.theme)); options.corners !== undefined && elem.toggleClass("ui-corner-all", options.corners); options.mini !== undefined && elem.toggleClass("ui-mini", options.mini); options.shadow !== undefined && this._ui.childWrapper.toggleClass("ui-shadow", options.shadow); if (options.excludeInvisible !== undefined) { this.options.excludeInvisible = options.excludeInvisible; callRefresh = true } returnValue = this._super(options); callRefresh && this.refresh(); return returnValue }, container: function () { return this._ui.childWrapper }, refresh: function () { var $el = this.container(), els = $el.find(".ui-btn").not(".ui-slider-handle"), create = this._initialRefresh; $.mobile.checkboxradio && $el.find(":mobile-checkboxradio").checkboxradio("refresh"); this._addFirstLastClasses(els, this.options.excludeInvisible ? this._getVisibles(els, create) : els, create); this._initialRefresh = false }, _destroy: function () { var ui, buttons, opts = this.options; if (opts.enhanced) return this; ui = this._ui; buttons = this.element.removeClass("ui-controlgroup ui-controlgroup-horizontal ui-controlgroup-vertical ui-corner-all ui-mini " + this._themeClassFromOption(opts.theme)).find(".ui-btn").not(".ui-slider-handle"); this._removeFirstLastClasses(buttons); ui.groupLegend.unwrap(); ui.childWrapper.children().unwrap() } }, $.mobile.behaviors.addFirstLastClasses)) })(jQuery); (function ($, undefined) { $.widget("mobile.button", { initSelector: "input[type='button'], input[type='submit'], input[type='reset']", options: { theme: null, icon: null, iconpos: "left", iconshadow: false, corners: true, shadow: true, inline: null, mini: null, wrapperClass: null, enhanced: false }, _create: function () { if (this.element.is(":disabled")) this.options.disabled = true; !this.options.enhanced && this._enhance(); $.extend(this, { wrapper: this.element.parent() }); this._on({ focus: function () { this.widget().addClass($.mobile.focusClass) }, blur: function () { this.widget().removeClass($.mobile.focusClass) } }); this.refresh(true) }, _enhance: function () { this.element.wrap(this._button()) }, _button: function () { var options = this.options, iconClasses = this._getIconClasses(this.options); return $("<div class='ui-btn ui-input-btn" + (options.wrapperClass ? " " + options.wrapperClass : "") + (options.theme ? " ui-btn-" + options.theme : "") + (options.corners ? " ui-corner-all" : "") + (options.shadow ? " ui-shadow" : "") + (options.inline ? " ui-btn-inline" : "") + (options.mini ? " ui-mini" : "") + (options.disabled ? " ui-state-disabled" : "") + (iconClasses ? " " + iconClasses : "") + "' >" + this.element.val() + "</div>") }, widget: function () { return this.wrapper }, _destroy: function () { this.element.insertBefore(this.button); this.button.remove() }, _getIconClasses: function (options) { return options.icon ? "ui-icon-" + options.icon + (options.iconshadow ? " ui-shadow-icon" : "") + " ui-btn-icon-" + options.iconpos : "" }, _setOptions: function (options) { var outer = this.widget(); options.theme !== undefined && outer.removeClass(this.options.theme).addClass("ui-btn-" + options.theme); options.corners !== undefined && outer.toggleClass("ui-corner-all", options.corners); options.shadow !== undefined && outer.toggleClass("ui-shadow", options.shadow); options.inline !== undefined && outer.toggleClass("ui-btn-inline", options.inline); options.mini !== undefined && outer.toggleClass("ui-mini", options.mini); if (options.disabled !== undefined) { this.element.prop("disabled", options.disabled); outer.toggleClass("ui-state-disabled", options.disabled) } (options.icon !== undefined || options.iconshadow !== undefined || options.iconpos !== undefined) && outer.removeClass(this._getIconClasses(this.options)).addClass(this._getIconClasses($.extend({}, this.options, options))); this._super(options) }, refresh: function (create) { var originalElement, isDisabled = this.element.prop("disabled"); this.options.icon && this.options.iconpos === "notext" && this.element.attr("title") && this.element.attr("title", this.element.val()); if (!create) { originalElement = this.element.detach(); $(this.wrapper).text(this.element.val()).append(originalElement) } this.options.disabled !== isDisabled && this._setOptions({ disabled: isDisabled }) } }) })(jQuery); (function ($, undefined) { $.mobile.behaviors.formReset = { _handleFormReset: function () { this._on(this.element.closest("form"), { reset: function () { this._delay("_reset") } }) } } })(jQuery); (function ($, undefined) { var escapeId = $.mobile.path.hashToSelector; $.widget("mobile.checkboxradio", $.extend({ initSelector: "input:not( :jqmData(role='flipswitch' ) )[type='checkbox'],input[type='radio']:not( :jqmData(role='flipswitch' ))", options: { theme: "inherit", mini: false, wrapperClass: null, enhanced: false, iconpos: "left" }, _create: function () { var input = this.element, o = this.options, inheritAttr = function (input, dataAttr) { return input.jqmData(dataAttr) || input.closest("form, fieldset").jqmData(dataAttr) }, parentLabel = input.closest("label"), label = parentLabel.length ? parentLabel : input.closest("form, fieldset, :jqmData(role='page'), :jqmData(role='dialog')").find("label").filter("[for='" + escapeId(input[0].id) + "']").first(), inputtype = input[0].type, checkedClass = "ui-" + inputtype + "-on", uncheckedClass = "ui-" + inputtype + "-off"; if (inputtype !== "checkbox" && inputtype !== "radio") return; if (this.element[0].disabled) this.options.disabled = true; o.iconpos = inheritAttr(input, "iconpos") || label.attr("data-" + $.mobile.ns + "iconpos") || o.iconpos, o.mini = inheritAttr(input, "mini") || o.mini; $.extend(this, { input: input, label: label, parentLabel: parentLabel, inputtype: inputtype, checkedClass: checkedClass, uncheckedClass: uncheckedClass }); !this.options.enhanced && this._enhance(); this._on(label, { vmouseover: "_handleLabelVMouseOver", vclick: "_handleLabelVClick" }); this._on(input, { vmousedown: "_cacheVals", vclick: "_handleInputVClick", focus: "_handleInputFocus", blur: "_handleInputBlur" }); this._handleFormReset(); this.refresh() }, _enhance: function () { this.label.addClass("ui-btn ui-corner-all"); if (this.parentLabel.length > 0) this.input.add(this.label).wrapAll(this._wrapper()); else { this.element.wrap(this._wrapper()); this.element.parent().prepend(this.label) } this._setOptions({ theme: this.options.theme, iconpos: this.options.iconpos, mini: this.options.mini }) }, _wrapper: function () { return $("<div class='" + (this.options.wrapperClass ? this.options.wrapperClass : "") + " ui-" + this.inputtype + (this.options.disabled ? " ui-state-disabled" : "") + "' ></div>") }, _handleInputFocus: function () { this.label.addClass($.mobile.focusClass) }, _handleInputBlur: function () { this.label.removeClass($.mobile.focusClass) }, _handleInputVClick: function () { this.element.prop("checked", this.element.is(":checked")); this._getInputSet().not(this.element).prop("checked", false); this._updateAll() }, _handleLabelVMouseOver: function (event) { if (this.label.parent().hasClass("ui-state-disabled")); }, _handleLabelVClick: function (event) { var input = this.element; if (input.is(":disabled")) { event.preventDefault(); return } this._cacheVals(); input.prop("checked", this.inputtype === "radio" && true || !input.prop("checked")); input.triggerHandler("click"); this._getInputSet().not(input).prop("checked", false); this._updateAll(); return false }, _cacheVals: function () { this._getInputSet().each(function () { $(this).attr("data-" + $.mobile.ns + "cacheVal", this.checked) }) }, _getInputSet: function () { var selector, formId, radio = this.element[0], name = radio.name, form = radio.form, doc = this.element.parents().last().get(0), radios = this.element; if (name && this.inputtype === "radio" && doc) { selector = "input[type='radio'][name='" + escapeId(name) + "']"; if (form) { formId = form.id; if (formId) radios = $(selector + "[form='" + escapeId(formId) + "']", doc); radios = $(form).find(selector).filter(function () { return this.form === form }).add(radios) } else radios = $(selector, doc).filter(function () { return !this.form }) } return radios }, _updateAll: function () { var self = this; this._getInputSet().each(function () { var $this = $(this); (this.checked || self.inputtype === "checkbox") && $this.trigger("change") }).checkboxradio("refresh") }, _reset: function () { this.refresh() }, _hasIcon: function () { var controlgroup, controlgroupWidget, controlgroupConstructor = $.mobile.controlgroup; if (controlgroupConstructor) { controlgroup = this.element.closest(":mobile-controlgroup," + controlgroupConstructor.prototype.initSelector); if (controlgroup.length > 0) { controlgroupWidget = $.data(controlgroup[0], "mobile-controlgroup"); return (controlgroupWidget ? controlgroupWidget.options.type : controlgroup.attr("data-" + $.mobile.ns + "type")) !== "horizontal" } } return true }, refresh: function () { var hasIcon = this._hasIcon(), isChecked = this.element[0].checked, active = $.mobile.activeBtnClass, iconposClass = "ui-btn-icon-" + this.options.iconpos, addClasses = [], removeClasses = []; if (hasIcon) { removeClasses.push(active); addClasses.push(iconposClass) } else { removeClasses.push(iconposClass); (isChecked ? addClasses : removeClasses).push(active) } if (isChecked) { addClasses.push(this.checkedClass); removeClasses.push(this.uncheckedClass) } else { addClasses.push(this.uncheckedClass); removeClasses.push(this.checkedClass) } this.label.addClass(addClasses.join(" ")).removeClass(removeClasses.join(" ")) }, widget: function () { return this.label.parent() }, _setOptions: function (options) { var label = this.label, currentOptions = this.options, outer = this.widget(), hasIcon = this._hasIcon(); if (options.disabled !== undefined) { this.input.prop("disabled", !!options.disabled); outer.toggleClass("ui-state-disabled", !!options.disabled) } options.mini !== undefined && outer.toggleClass("ui-mini", !!options.mini); options.theme !== undefined && label.removeClass("ui-btn-" + currentOptions.theme).addClass("ui-btn-" + options.theme); options.wrapperClass !== undefined && outer.removeClass(currentOptions.wrapperClass).addClass(options.wrapperClass); if (options.iconpos !== undefined && hasIcon) label.removeClass("ui-btn-icon-" + currentOptions.iconpos).addClass("ui-btn-icon-" + options.iconpos); else !hasIcon && label.removeClass("ui-btn-icon-" + currentOptions.iconpos); this._super(options) } }, $.mobile.behaviors.formReset)) })(jQuery) })