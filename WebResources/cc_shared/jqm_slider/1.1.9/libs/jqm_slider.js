/*
------------------------------------------- START OF THIRD PARTY NOTICE -----------------------------------------

This file is based on or incorporates material from the projects listed below (Third Party IP). The original copyright notice and the license under which Microsoft received such Third Party IP, are set forth below. Such licenses and notices are provided for informational purposes only. Microsoft licenses the Third Party IP to you under the licensing terms for the Microsoft product. Microsoft reserves all other rights not expressly granted under this agreement, whether by implication, estoppel or otherwise. 

jQuery Mobile 1.4.2
Copyright 2010, 2014 jQuery Foundation, Inc. and other contributors

Provided for Informational Purposes Only
MIT License 
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: 
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE 
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
----------------------------------------------- END OF THIRD PARTY NOTICE ------------------------------------------
*/
(function (root, doc, factory) { if (typeof define === "function" && define.amd) define(["jquery"], function ($) { factory($, root, doc); return $.mobile }); else factory(root.jQuery, root, doc) })(this, document, function (jQuery, window, document, undefined) { (function ($) { $.mobile = $.mobile || {} })(jQuery); (function ($, window, undefined) { var nsNormalizeDict = {}, oldFind = $.find, rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/, jqmDataRE = /:jqmData\(([^)]*)\)/g; $.extend($.mobile, { ns: "", getAttribute: function (element, key) { var data; element = element.jquery ? element[0] : element; if (element && element.getAttribute) data = element.getAttribute("data-" + $.mobile.ns + key); try { data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? JSON.parse(data) : data } catch (err) { } return data }, nsNormalizeDict: nsNormalizeDict, nsNormalize: function (prop) { return nsNormalizeDict[prop] || (nsNormalizeDict[prop] = $.camelCase($.mobile.ns + prop)) }, closestPageData: function ($target) { return $target.closest(":jqmData(role='page'), :jqmData(role='dialog')").data("mobile-page") } }); $.fn.jqmData = function (prop, value) { var result; if (typeof prop !== "undefined") { if (prop) prop = $.mobile.nsNormalize(prop); if (arguments.length < 2 || value === undefined) result = this.data(prop); else result = this.data(prop, value) } return result }; $.jqmData = function (elem, prop, value) { var result; if (typeof prop !== "undefined") result = $.data(elem, prop ? $.mobile.nsNormalize(prop) : prop, value); return result }; $.fn.jqmRemoveData = function (prop) { return this.removeData($.mobile.nsNormalize(prop)) }; $.jqmRemoveData = function (elem, prop) { return $.removeData(elem, $.mobile.nsNormalize(prop)) }; $.find = function (selector, context, ret, extra) { if (selector.indexOf(":jqmData") > -1) selector = selector.replace(jqmDataRE, "[data-" + ($.mobile.ns || "") + "$1]"); return oldFind.call(this, selector, context, ret, extra) }; $.extend($.find, oldFind) })(jQuery, this); (function ($, undefined) { var uuid = 0, slice = Array.prototype.slice, _cleanData = $.cleanData; $.cleanData = function (elems) { for (var i = 0, elem; (elem = elems[i]) != null; i++) try { $(elem).triggerHandler("remove") } catch (e) { } _cleanData(elems) }; $.widget = function (name, base, prototype) { var fullName, existingConstructor, constructor, basePrototype, proxiedPrototype = {}, namespace = name.split(".")[0]; name = name.split(".")[1]; fullName = namespace + "-" + name; if (!prototype) { prototype = base; base = $.Widget } $.expr[":"][fullName.toLowerCase()] = function (elem) { return !!$.data(elem, fullName) }; $[namespace] = $[namespace] || {}; existingConstructor = $[namespace][name]; constructor = $[namespace][name] = function (options, element) { if (!this._createWidget) return new constructor(options, element); arguments.length && this._createWidget(options, element) }; $.extend(constructor, existingConstructor, { version: prototype.version, _proto: $.extend({}, prototype), _childConstructors: [] }); basePrototype = new base; basePrototype.options = $.widget.extend({}, basePrototype.options); $.each(prototype, function (prop, value) { if (!$.isFunction(value)) { proxiedPrototype[prop] = value; return } proxiedPrototype[prop] = function () { var _super = function () { return base.prototype[prop].apply(this, arguments) }, _superApply = function (args) { return base.prototype[prop].apply(this, args) }; return function () { var __super = this._super, __superApply = this._superApply, returnValue; this._super = _super; this._superApply = _superApply; returnValue = value.apply(this, arguments); this._super = __super; this._superApply = __superApply; return returnValue } }() }); constructor.prototype = $.widget.extend(basePrototype, { widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix || name : name }, proxiedPrototype, { constructor: constructor, "namespace": namespace, widgetName: name, widgetFullName: fullName }); if (existingConstructor) { $.each(existingConstructor._childConstructors, function (i, child) { var childPrototype = child.prototype; $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto) }); delete existingConstructor._childConstructors } else base._childConstructors.push(constructor); $.widget.bridge(name, constructor); return constructor }; $.widget.extend = function (target) { for (var input = slice.call(arguments, 1), inputIndex = 0, inputLength = input.length, key, value; inputIndex < inputLength; inputIndex++) for (key in input[inputIndex]) { value = input[inputIndex][key]; if (input[inputIndex].hasOwnProperty(key) && value !== undefined) if ($.isPlainObject(value)) target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : $.widget.extend({}, value); else target[key] = value } return target }; $.widget.bridge = function (name, object) { var fullName = object.prototype.widgetFullName || name; $.fn[name] = function (options) { var isMethodCall = typeof options === "string", args = slice.call(arguments, 1), returnValue = this; options = !isMethodCall && args.length ? $.widget.extend.apply(null, [options].concat(args)) : options; if (isMethodCall) this.each(function () { var methodValue, instance = $.data(this, fullName); if (options === "instance") { returnValue = instance; return false } if (!instance) return $.error("cannot call methods on " + name + " prior to initialization; attempted to call method '" + options + "'"); if (!$.isFunction(instance[options]) || options.charAt(0) === "_") return $.error("no such method '" + options + "' for " + name + " widget instance"); methodValue = instance[options].apply(instance, args); if (methodValue !== instance && methodValue !== undefined) { returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue; return false } }); else this.each(function () { var instance = $.data(this, fullName); if (instance) instance.option(options || {})._init(); else $.data(this, fullName, new object(options, this)) }); return returnValue } }; $.Widget = function () { }; $.Widget._childConstructors = []; $.Widget.prototype = { widgetName: "widget", widgetEventPrefix: "", defaultElement: "<div>", options: { disabled: false, create: null }, _createWidget: function (options, element) { element = $(element || this.defaultElement || this)[0]; this.element = $(element); this.uuid = uuid++; this.eventNamespace = "." + this.widgetName + this.uuid; this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options); this.bindings = $(); this.hoverable = $(); this.focusable = $(); if (element !== this) { $.data(element, this.widgetFullName, this); this._on(true, this.element, { remove: function (event) { event.target === element && this.destroy() } }); this.document = $(element.style ? element.ownerDocument : element.document || element); this.window = $(this.document[0].defaultView || this.document[0].parentWindow) } this._create(); this._trigger("create", null, this._getCreateEventData()); this._init() }, _getCreateOptions: $.noop, _getCreateEventData: $.noop, _create: $.noop, _init: $.noop, destroy: function () { this._destroy(); this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData($.camelCase(this.widgetFullName)); this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled ui-state-disabled"); this.bindings.unbind(this.eventNamespace); this.hoverable.removeClass("ui-state-hover"); this.focusable.removeClass("ui-state-focus") }, _destroy: $.noop, widget: function () { return this.element }, option: function (key, value) { var options = key, parts, curOption, i; if (arguments.length === 0) return $.widget.extend({}, this.options); if (typeof key === "string") { options = {}; parts = key.split("."); key = parts.shift(); if (parts.length) { curOption = options[key] = $.widget.extend({}, this.options[key]); for (i = 0; i < parts.length - 1; i++) { curOption[parts[i]] = curOption[parts[i]] || {}; curOption = curOption[parts[i]] } key = parts.pop(); if (value === undefined) return curOption[key] === undefined ? null : curOption[key]; curOption[key] = value } else { if (value === undefined) return this.options[key] === undefined ? null : this.options[key]; options[key] = value } } this._setOptions(options); return this }, _setOptions: function (options) { var key; for (key in options) this._setOption(key, options[key]); return this }, _setOption: function (key, value) { this.options[key] = value; if (key === "disabled") { this.widget().toggleClass(this.widgetFullName + "-disabled", !!value); this.hoverable.removeClass("ui-state-hover"); this.focusable.removeClass("ui-state-focus") } return this }, enable: function () { return this._setOptions({ disabled: false }) }, disable: function () { return this._setOptions({ disabled: true }) }, _on: function (suppressDisabledCheck, element, handlers) { var delegateElement, instance = this; if (typeof suppressDisabledCheck !== "boolean") { handlers = element; element = suppressDisabledCheck; suppressDisabledCheck = false } if (!handlers) { handlers = element; element = this.element; delegateElement = this.widget() } else { element = delegateElement = $(element); this.bindings = this.bindings.add(element) } $.each(handlers, function (event, handler) { function handlerProxy() { if (!suppressDisabledCheck && (instance.options.disabled === true || $(this).hasClass("ui-state-disabled"))) return; return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments) } if (typeof handler !== "string") handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++; var match = event.match(/^(\w+)\s*(.*)$/), eventName = match[1] + instance.eventNamespace, selector = match[2]; if (selector) delegateElement.delegate(selector, eventName, handlerProxy); else element.bind(eventName, handlerProxy) }) }, _off: function (element, eventName) { eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace; element.unbind(eventName).undelegate(eventName) }, _delay: function (handler, delay) { function handlerProxy() { return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments) } var instance = this; return setTimeout(handlerProxy, delay || 0) }, _hoverable: function (element) { this.hoverable = this.hoverable.add(element); this._on(element, { mouseenter: function (event) { $(event.currentTarget).addClass("ui-state-hover") }, mouseleave: function (event) { $(event.currentTarget).removeClass("ui-state-hover") } }) }, _focusable: function (element) { this.focusable = this.focusable.add(element); this._on(element, { focusin: function (event) { $(event.currentTarget).addClass("ui-state-focus") }, focusout: function (event) { $(event.currentTarget).removeClass("ui-state-focus") } }) }, _trigger: function (type, event, data) { var prop, orig, callback = this.options[type]; data = data || {}; event = $.Event(event); event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase(); event.target = this.element[0]; orig = event.originalEvent; if (orig) for (prop in orig) if (!(prop in event)) event[prop] = orig[prop]; this.element.trigger(event, data); return !($.isFunction(callback) && callback.apply(this.element[0], [event].concat(data)) === false || event.isDefaultPrevented()) } }; $.each({ show: "fadeIn", hide: "fadeOut" }, function (method, defaultEffect) { $.Widget.prototype["_" + method] = function (element, options, callback) { if (typeof options === "string") options = { effect: options }; var hasOptions, effectName = !options ? method : options === true || typeof options === "number" ? defaultEffect : options.effect || defaultEffect; options = options || {}; if (typeof options === "number") options = { duration: options }; hasOptions = !$.isEmptyObject(options); options.complete = callback; options.delay && element.delay(options.delay); if (hasOptions && $.effects && $.effects.effect[effectName]) element[method](options); else if (effectName !== method && element[effectName]) element[effectName](options.duration, options.easing, callback); else element.queue(function (next) { $(this)[method](); callback && callback.call(element[0]); next() }) } }) })(jQuery); (function ($, undefined) { var rcapitals = /[A-Z]/g, replaceFunction = function (c) { return "-" + c.toLowerCase() }; $.extend($.Widget.prototype, { _getCreateOptions: function () { var option, value, elem = this.element[0], options = {}; if (!$.mobile.getAttribute(elem, "defaults")) for (option in this.options) { value = $.mobile.getAttribute(elem, option.replace(rcapitals, replaceFunction)); if (value != null) options[option] = value } return options } }); $.mobile.widget = $.Widget })(jQuery); (function ($, window, undefined) { $.extend($.mobile, { version: "1.4.2", subPageUrlKey: "ui-page", hideUrlBar: true, keepNative: ":jqmData(role='none'), :jqmData(role='nojs')", activePageClass: "ui-page-active", activeBtnClass: "ui-btn-active", focusClass: "ui-focus", ajaxEnabled: true, hashListeningEnabled: true, linkBindingEnabled: true, defaultPageTransition: "fade", maxTransitionWidth: false, minScrollBack: 0, defaultDialogTransition: "pop", pageLoadErrorMessage: "Error Loading Page", pageLoadErrorMessageTheme: "a", phonegapNavigationEnabled: false, autoInitializePage: true, pushStateEnabled: true, ignoreContentEnabled: false, buttonMarkup: { hoverDelay: 200 }, dynamicBaseEnabled: true, pageContainer: $(), allowCrossDomainPages: false, dialogHashKey: "&ui-state=dialog" }) })(jQuery, this); (function ($, undefined) { var uuid = 0, runiqueId = /^ui-id-\d+$/; $.ui = $.ui || {}; $.extend($.ui, { version: "c0ab71056b936627e8a7821f03c044aec6280a40", keyCode: { BACKSPACE: 8, COMMA: 188, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, LEFT: 37, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SPACE: 32, TAB: 9, UP: 38 } }); $.fn.extend({ focus: function (orig) { return function (delay, fn) { return typeof delay === "number" ? this.each(function () { var elem = this; setTimeout(function () { $(elem).focus(); fn && fn.call(elem) }, delay) }) : orig.apply(this, arguments) } }($.fn.focus), scrollParent: function () { var scrollParent; if ($.ui.ie && /(static|relative)/.test(this.css("position")) || /absolute/.test(this.css("position"))) scrollParent = this.parents().filter(function () { return /(relative|absolute|fixed)/.test($.css(this, "position")) && /(auto|scroll)/.test($.css(this, "overflow") + $.css(this, "overflow-y") + $.css(this, "overflow-x")) }).eq(0); else scrollParent = this.parents().filter(function () { return /(auto|scroll)/.test($.css(this, "overflow") + $.css(this, "overflow-y") + $.css(this, "overflow-x")) }).eq(0); return /fixed/.test(this.css("position")) || !scrollParent.length ? $(this[0].ownerDocument || document) : scrollParent }, uniqueId: function () { return this.each(function () { if (!this.id) this.id = "ui-id-" + ++uuid }) }, removeUniqueId: function () { return this.each(function () { runiqueId.test(this.id) && $(this).removeAttr("id") }) } }); function focusable(element, isTabIndexNotNaN) { var map, mapName, img, nodeName = element.nodeName.toLowerCase(); if ("area" === nodeName) { map = element.parentNode; mapName = map.name; if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") return false; img = $("img[usemap=#" + mapName + "]")[0]; return !!img && visible(img) } return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : "a" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element) } function visible(element) { return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function () { return $.css(this, "visibility") === "hidden" }).length } $.extend($.expr[":"], { data: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) { return function (elem) { return !!$.data(elem, dataName) } }) : function (elem, i, match) { return !!$.data(elem, match[3]) }, focusable: function (element) { return focusable(element, !isNaN($.attr(element, "tabindex"))) }, tabbable: function (element) { var tabIndex = $.attr(element, "tabindex"), isTabIndexNaN = isNaN(tabIndex); return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN) } }); !$("<a>").outerWidth(1).jquery && $.each(["Width", "Height"], function (i, name) { var side = name === "Width" ? ["Left", "Right"] : ["Top", "Bottom"], type = name.toLowerCase(), orig = { innerWidth: $.fn.innerWidth, innerHeight: $.fn.innerHeight, outerWidth: $.fn.outerWidth, outerHeight: $.fn.outerHeight }; function reduce(elem, size, border, margin) { $.each(side, function () { size -= parseFloat($.css(elem, "padding" + this)) || 0; if (border) size -= parseFloat($.css(elem, "border" + this + "Width")) || 0; if (margin) size -= parseFloat($.css(elem, "margin" + this)) || 0 }); return size } $.fn["inner" + name] = function (size) { if (size === undefined) return orig["inner" + name].call(this); return this.each(function () { $(this).css(type, reduce(this, size) + "px") }) }; $.fn["outer" + name] = function (size, margin) { if (typeof size !== "number") return orig["outer" + name].call(this, size); return this.each(function () { $(this).css(type, reduce(this, size, true, margin) + "px") }) } }); if (!$.fn.addBack) $.fn.addBack = function (selector) { return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector)) }; if ($("<a>").data("a-b", "a").removeData("a-b").data("a-b")) $.fn.removeData = function (removeData) { return function (key) { if (arguments.length) return removeData.call(this, $.camelCase(key)); else return removeData.call(this) } }($.fn.removeData); $.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()); $.support.selectstart = "onselectstart" in document.createElement("div"); $.fn.extend({ disableSelection: function () { return this.bind(($.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function (event) { }) }, enableSelection: function () { return this.unbind(".ui-disableSelection") }, zIndex: function (zIndex) { if (zIndex !== undefined) return this.css("zIndex", zIndex); if (this.length) { var elem = $(this[0]), position, value; while (elem.length && elem[0] !== document) { position = elem.css("position"); if (position === "absolute" || position === "relative" || position === "fixed") { value = parseInt(elem.css("zIndex"), 10); if (!isNaN(value) && value !== 0) return value } elem = elem.parent() } } return 0 } }); $.ui.plugin = { add: function (module, option, set) { var i, proto = $.ui[module].prototype; for (i in set) { proto.plugins[i] = proto.plugins[i] || []; proto.plugins[i].push([option, set[i]]) } }, call: function (instance, name, args, allowDisconnected) { var i, set = instance.plugins[name]; if (!set) return; if (!allowDisconnected && (!instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11)) return; for (i = 0; i < set.length; i++) instance.options[set[i][0]] && set[i][1].apply(instance.element, args) } } })(jQuery); (function ($, window, undefined) { var compensateToolbars = function (page, desiredHeight) { var pageParent = page.parent(), toolbarsAffectingHeight = [], externalHeaders = pageParent.children(":jqmData(role='header')"), internalHeaders = page.children(":jqmData(role='header')"), externalFooters = pageParent.children(":jqmData(role='footer')"), internalFooters = page.children(":jqmData(role='footer')"); if (internalHeaders.length === 0 && externalHeaders.length > 0) toolbarsAffectingHeight = toolbarsAffectingHeight.concat(externalHeaders.toArray()); if (internalFooters.length === 0 && externalFooters.length > 0) toolbarsAffectingHeight = toolbarsAffectingHeight.concat(externalFooters.toArray()); $.each(toolbarsAffectingHeight, function (index, value) { desiredHeight -= $(value).outerHeight() }); return Math.max(0, desiredHeight) }; $.extend($.mobile, { window: $(window), document: $(document), keyCode: $.ui.keyCode, behaviors: {}, silentScroll: function (ypos) { if ($.type(ypos) !== "number") ypos = $.mobile.defaultHomeScroll; $.event.special.scrollstart.enabled = false; setTimeout(function () { window.scrollTo(0, ypos); $.mobile.document.trigger("silentscroll", { x: 0, y: ypos }) }, 20); setTimeout(function () { $.event.special.scrollstart.enabled = true }, 150) }, getClosestBaseUrl: function (ele) { var url = $(ele).closest(".ui-page").jqmData("url"), base = $.mobile.path.documentBase.hrefNoHash; if (!$.mobile.dynamicBaseEnabled || !url || !$.mobile.path.isPath(url)) url = base; return $.mobile.path.makeUrlAbsolute(url, base) }, removeActiveLinkClass: function (forceRemoval) { !!$.mobile.activeClickedLink && (!$.mobile.activeClickedLink.closest("." + $.mobile.activePageClass).length || forceRemoval) && $.mobile.activeClickedLink.removeClass($.mobile.activeBtnClass); $.mobile.activeClickedLink = null }, getInheritedTheme: function (el, defaultTheme) { var e = el[0], ltr = "", re = /ui-(bar|body|overlay)-([a-z])\b/, c, m; while (e) { c = e.className || ""; if (c && (m = re.exec(c)) && (ltr = m[2])) break; e = e.parentNode } return ltr || defaultTheme || "a" }, enhanceable: function (elements) { return this.haveParents(elements, "enhance") }, hijackable: function (elements) { return this.haveParents(elements, "ajax") }, haveParents: function (elements, attr) { if (!$.mobile.ignoreContentEnabled) return elements; for (var count = elements.length, $newSet = $(), e, $element, excluded, c, i = 0; i < count; i++) { $element = elements.eq(i); excluded = false; e = elements[i]; while (e) { c = e.getAttribute ? e.getAttribute("data-" + $.mobile.ns + attr) : ""; if (c === "false") { excluded = true; break } e = e.parentNode } if (!excluded) $newSet = $newSet.add($element) } return $newSet }, getScreenHeight: function () { return window.innerHeight || $.mobile.window.height() }, resetActivePageHeight: function (height) { var page = $("." + $.mobile.activePageClass), pageHeight = page.height(), pageOuterHeight = page.outerHeight(true); height = compensateToolbars(page, typeof height === "number" ? height : $.mobile.getScreenHeight()); page.css("min-height", height - (pageOuterHeight - pageHeight)) }, loading: function () { var loader = this.loading._widget || $($.mobile.loader.prototype.defaultHtml).loader(), returnValue = loader.loader.apply(loader, arguments); this.loading._widget = loader; return returnValue } }); $.addDependents = function (elem, newDependents) { var $elem = $(elem), dependents = $elem.jqmData("dependents") || $(); $elem.jqmData("dependents", $(dependents).add(newDependents)) }; $.fn.extend({ removeWithDependents: function () { $.removeWithDependents(this) }, enhanceWithin: function () { var index, widgetElements = {}, keepNative = $.mobile.page.prototype.keepNativeSelector(), that = this; $.mobile.nojs && $.mobile.nojs(this); $.mobile.links && $.mobile.links(this); $.mobile.degradeInputsWithin && $.mobile.degradeInputsWithin(this); $.fn.buttonMarkup && this.find($.fn.buttonMarkup.initSelector).not(keepNative).jqmEnhanceable().buttonMarkup(); $.fn.fieldcontain && this.find(":jqmData(role='fieldcontain')").not(keepNative).jqmEnhanceable().fieldcontain(); $.each($.mobile.widgets, function (name, constructor) { if (constructor.initSelector) { var elements = $.mobile.enhanceable(that.find(constructor.initSelector)); if (elements.length > 0) elements = elements.not(keepNative); if (elements.length > 0) widgetElements[constructor.prototype.widgetName] = elements } }); for (index in widgetElements) widgetElements[index][index](); return this }, addDependents: function (newDependents) { $.addDependents(this, newDependents) }, getEncodedText: function () { return $("<a>").text(this.text()).html() }, jqmEnhanceable: function () { return $.mobile.enhanceable(this) }, jqmHijackable: function () { return $.mobile.hijackable(this) } }); $.removeWithDependents = function (nativeElement) { var element = $(nativeElement); (element.jqmData("dependents") || $()).remove(); element.remove() }; $.addDependents = function (nativeElement, newDependents) { var element = $(nativeElement), dependents = element.jqmData("dependents") || $(); element.jqmData("dependents", $(dependents).add(newDependents)) }; $.find.matches = function (expr, set) { return $.find(expr, null, null, set) }; $.find.matchesSelector = function (node, expr) { return $.find(expr, null, null, [node]).length > 0 } })(jQuery, this); (function ($, undefined) { $.mobile.widgets = {}; var originalWidget = $.widget, keepNativeFactoryDefault = $.mobile.keepNative; $.widget = function (orig) { return function () { var constructor = orig.apply(this, arguments), name = constructor.prototype.widgetName; constructor.initSelector = constructor.prototype.initSelector !== undefined ? constructor.prototype.initSelector : ":jqmData(role='" + name + "')"; $.mobile.widgets[name] = constructor; return constructor } }($.widget); $.extend($.widget, originalWidget); $.mobile.document.on("create", function (event) { $(event.target).enhanceWithin() }); $.widget("mobile.page", { options: { theme: "a", domCache: false, keepNativeDefault: $.mobile.keepNative, contentTheme: null, enhanced: false }, _createWidget: function () { $.Widget.prototype._createWidget.apply(this, arguments); this._trigger("init") }, _create: function () { if (this._trigger("beforecreate") === false) return false; !this.options.enhanced && this._enhance(); this._on(this.element, { pagebeforehide: "removeContainerBackground", pagebeforeshow: "_handlePageBeforeShow" }); this.element.enhanceWithin(); $.mobile.getAttribute(this.element[0], "role") === "dialog" && $.mobile.dialog && this.element.dialog() }, _enhance: function () { var attrPrefix = "data-" + $.mobile.ns, self = this; this.options.role && this.element.attr("data-" + $.mobile.ns + "role", this.options.role); this.element.attr("tabindex", "0").addClass("ui-page ui-page-theme-" + this.options.theme); this.element.find("[" + attrPrefix + "role='content']").each(function () { var $this = $(this), theme = this.getAttribute(attrPrefix + "theme") || undefined; self.options.contentTheme = theme || self.options.contentTheme || self.options.dialog && self.options.theme || self.element.jqmData("role") === "dialog" && self.options.theme; $this.addClass("ui-content"); self.options.contentTheme && $this.addClass("ui-body-" + self.options.contentTheme); $this.attr("role", "main").addClass("ui-content") }) }, bindRemove: function (callback) { var page = this.element; !page.data("mobile-page").options.domCache && page.is(":jqmData(external-page='true')") && page.bind("pagehide.remove", callback || function (e, data) { if (!data.samePage) { var $this = $(this), prEvent = new $.Event("pageremove"); $this.trigger(prEvent); !prEvent.isDefaultPrevented() && $this.removeWithDependents() } }) }, _setOptions: function (o) { o.theme !== undefined && this.element.removeClass("ui-page-theme-" + this.options.theme).addClass("ui-page-theme-" + o.theme); o.contentTheme !== undefined && this.element.find("[data-" + $.mobile.ns + "='content']").removeClass("ui-body-" + this.options.contentTheme).addClass("ui-body-" + o.contentTheme) }, _handlePageBeforeShow: function () { this.setContainerBackground() }, removeContainerBackground: function () { this.element.closest(":mobile-pagecontainer").pagecontainer({ theme: "none" }) }, setContainerBackground: function (theme) { this.element.parent().pagecontainer({ theme: theme || this.options.theme }) }, keepNativeSelector: function () { var options = this.options, keepNative = $.trim(options.keepNative || ""), globalValue = $.trim($.mobile.keepNative), optionValue = $.trim(options.keepNativeDefault), newDefault = keepNativeFactoryDefault === globalValue ? "" : globalValue, oldDefault = newDefault === "" ? optionValue : ""; return (keepNative ? [keepNative] : []).concat(newDefault ? [newDefault] : []).concat(oldDefault ? [oldDefault] : []).join(", ") } }) })(jQuery); (function ($, undefined) { $.mobile.degradeInputs = { color: false, date: false, datetime: false, "datetime-local": false, email: false, month: false, number: false, range: "number", search: "text", tel: false, time: false, url: false, week: false }; $.mobile.page.prototype.options.degradeInputs = $.mobile.degradeInputs; $.mobile.degradeInputsWithin = function (target) { target = $(target); target.find("input").not($.mobile.page.prototype.keepNativeSelector()).each(function () { var element = $(this), type = this.getAttribute("type"), optType = $.mobile.degradeInputs[type] || "text", html, hasType, findstr, repstr; if ($.mobile.degradeInputs[type]) { html = $("<div>").html(element.clone()).html(); hasType = html.indexOf(" type=") > -1; findstr = hasType ? /\s+type=["']?\w+['"]?/ : /\/?>/; repstr = ' type="' + optType + '" data-' + $.mobile.ns + 'type="' + type + '"' + (hasType ? "" : ">"); element.replaceWith(html.replace(findstr, repstr)) } }) } })(jQuery); (function ($, window, document, undefined) { var dataPropertyName = "virtualMouseBindings", touchTargetPropertyName = "virtualTouchID", virtualEventNames = "vmouseover vmousedown vmousemove vmouseup vclick vmouseout vmousecancel".split(" "), touchEventProps = "clientX clientY pageX pageY screenX screenY".split(" "), mouseHookProps = $.event.mouseHooks ? $.event.mouseHooks.props : [], mouseEventProps = $.event.props.concat(mouseHookProps), activeDocHandlers = {}, resetTimerID = 0, startX = 0, startY = 0, didScroll = false, clickBlockList = [], blockMouseTriggers = false, blockTouchTriggers = false, eventCaptureSupported = "addEventListener" in document, $document = $(document), nextTouchID = 1, lastTouchID = 0, threshold, i; $.vmouse = { moveDistanceThreshold: 10, clickDistanceThreshold: 10, resetTimerDuration: 1500 }; function getNativeEvent(event) { while (event && typeof event.originalEvent !== "undefined") event = event.originalEvent; return event } function createVirtualEvent(event, eventType) { var t = event.type, oe, props, ne, prop, ct, touch, i, j, len; event = $.Event(event); event.type = eventType; oe = event.originalEvent; props = $.event.props; if (t.search(/^(mouse|click)/) > -1) props = mouseEventProps; if (oe) for (i = props.length, prop; i;) { prop = props[--i]; event[prop] = oe[prop] } if (t.search(/mouse(down|up)|click/) > -1 && !event.which) event.which = 1; if (t.search(/^touch/) !== -1) { ne = getNativeEvent(oe); t = ne.touches; ct = ne.changedTouches; touch = t && t.length ? t[0] : ct && ct.length ? ct[0] : undefined; if (touch) for (j = 0, len = touchEventProps.length; j < len; j++) { prop = touchEventProps[j]; event[prop] = touch[prop] } } return event } function getVirtualBindingFlags(element) { var flags = {}, b, k; while (element) { b = $.data(element, dataPropertyName); for (k in b) if (b[k]) flags[k] = flags.hasVirtualBinding = true; element = element.parentNode } return flags } function getClosestElementWithVirtualBinding(element, eventType) { var b; while (element) { b = $.data(element, dataPropertyName); if (b && (!eventType || b[eventType])) return element; element = element.parentNode } return null } function enableTouchBindings() { blockTouchTriggers = false } function disableTouchBindings() { blockTouchTriggers = true } function enableMouseBindings() { lastTouchID = 0; clickBlockList.length = 0; blockMouseTriggers = false; disableTouchBindings() } function disableMouseBindings() { enableTouchBindings() } function startResetTimer() { clearResetTimer(); resetTimerID = setTimeout(function () { resetTimerID = 0; enableMouseBindings() }, $.vmouse.resetTimerDuration) } function clearResetTimer() { if (resetTimerID) { clearTimeout(resetTimerID); resetTimerID = 0 } } function triggerVirtualEvent(eventType, event, flags) { var ve; if (flags && flags[eventType] || !flags && getClosestElementWithVirtualBinding(event.target, eventType)) { ve = createVirtualEvent(event, eventType); $(event.target).trigger(ve) } return ve } function mouseEventCallback(event) { var touchID = $.data(event.target, touchTargetPropertyName), ve; !blockMouseTriggers && (!lastTouchID || lastTouchID !== touchID) && triggerVirtualEvent("v" + event.type, event) } function handleTouchStart(event) { var touches = getNativeEvent(event).touches, target, flags, t; if (touches && touches.length === 1) { target = event.target; flags = getVirtualBindingFlags(target); if (flags.hasVirtualBinding) { lastTouchID = nextTouchID++; $.data(target, touchTargetPropertyName, lastTouchID); clearResetTimer(); disableMouseBindings(); didScroll = false; t = getNativeEvent(event).touches[0]; startX = t.pageX; startY = t.pageY; triggerVirtualEvent("vmouseover", event, flags); triggerVirtualEvent("vmousedown", event, flags) } } } function handleScroll(event) { if (blockTouchTriggers) return; !didScroll && triggerVirtualEvent("vmousecancel", event, getVirtualBindingFlags(event.target)); didScroll = true; startResetTimer() } function handleTouchMove(event) { if (blockTouchTriggers) return; var t = getNativeEvent(event).touches[0], didCancel = didScroll, moveThreshold = $.vmouse.moveDistanceThreshold, flags = getVirtualBindingFlags(event.target); didScroll = didScroll || (Math.abs(t.pageX - startX) > moveThreshold || Math.abs(t.pageY - startY) > moveThreshold); didScroll && !didCancel && triggerVirtualEvent("vmousecancel", event, flags); triggerVirtualEvent("vmousemove", event, flags); startResetTimer() } function handleTouchEnd(event) { if (blockTouchTriggers) return; disableTouchBindings(); var flags = getVirtualBindingFlags(event.target), ve, t; triggerVirtualEvent("vmouseup", event, flags); if (!didScroll) { ve = triggerVirtualEvent("vclick", event, flags); if (ve && ve.isDefaultPrevented()) { t = getNativeEvent(event).changedTouches[0]; clickBlockList.push({ touchID: lastTouchID, x: t.clientX, y: t.clientY }); blockMouseTriggers = true } } triggerVirtualEvent("vmouseout", event, flags); didScroll = false; startResetTimer() } function hasVirtualBindings(ele) { var bindings = $.data(ele, dataPropertyName), k; if (bindings) for (k in bindings) if (bindings[k]) return true; return false } function dummyMouseHandler() { } function getSpecialEventObject(eventType) { var realType = eventType.substr(1); return { setup: function () { !hasVirtualBindings(this) && $.data(this, dataPropertyName, {}); var bindings = $.data(this, dataPropertyName); bindings[eventType] = true; activeDocHandlers[eventType] = (activeDocHandlers[eventType] || 0) + 1; activeDocHandlers[eventType] === 1 && $document.bind(realType, mouseEventCallback); $(this).bind(realType, dummyMouseHandler); if (eventCaptureSupported && (navigator.userAgent.indexOf('Windows Phone') === -1 || navigator.userAgent.indexOf('Windows Phone 10') !== -1)) { activeDocHandlers["touchstart"] = (activeDocHandlers["touchstart"] || 0) + 1; activeDocHandlers["touchstart"] === 1 && $document.bind("touchstart", handleTouchStart).bind("touchend", handleTouchEnd).bind("touchmove", handleTouchMove).bind("scroll", handleScroll) } }, teardown: function () { --activeDocHandlers[eventType]; !activeDocHandlers[eventType] && $document.unbind(realType, mouseEventCallback); if (eventCaptureSupported && (navigator.userAgent.indexOf('Windows Phone') === -1 || navigator.userAgent.indexOf('Windows Phone 10') !== -1)) { --activeDocHandlers["touchstart"]; !activeDocHandlers["touchstart"] && $document.unbind("touchstart", handleTouchStart).unbind("touchmove", handleTouchMove).unbind("touchend", handleTouchEnd).unbind("scroll", handleScroll) } var $this = $(this), bindings = $.data(this, dataPropertyName); if (bindings) bindings[eventType] = false; $this.unbind(realType, dummyMouseHandler); !hasVirtualBindings(this) && $this.removeData(dataPropertyName) } } } for (i = 0; i < virtualEventNames.length; i++) $.event.special[virtualEventNames[i]] = getSpecialEventObject(virtualEventNames[i]); eventCaptureSupported && document.addEventListener("click", function (e) { var cnt = clickBlockList.length, target = e.target, x, y, ele, i, o, touchID; if (cnt) { x = e.clientX; y = e.clientY; threshold = $.vmouse.clickDistanceThreshold; ele = target; while (ele) { for (i = 0; i < cnt; i++) { o = clickBlockList[i]; touchID = 0; if (ele === target && Math.abs(o.x - x) < threshold && Math.abs(o.y - y) < threshold || $.data(ele, touchTargetPropertyName) === o.touchID) return } ele = ele.parentNode } } }, true) })(jQuery, window, document); (function ($) { var meta = $("meta[name=viewport]"), initialContent = meta.attr("content"), disabledZoom = initialContent + ",maximum-scale=1, user-scalable=no", enabledZoom = initialContent + ",maximum-scale=10, user-scalable=yes", disabledInitially = /(user-scalable[\s]*=[\s]*no)|(maximum-scale[\s]*=[\s]*1)[$,\s]/.test(initialContent); $.mobile.zoom = $.extend({}, { enabled: !disabledInitially, locked: false, disable: function (lock) { if (!disabledInitially && !$.mobile.zoom.locked) { meta.attr("content", disabledZoom); $.mobile.zoom.enabled = false; $.mobile.zoom.locked = lock || false } }, enable: function (unlock) { if (!disabledInitially && (!$.mobile.zoom.locked || unlock === true)) { meta.attr("content", enabledZoom); $.mobile.zoom.enabled = true; $.mobile.zoom.locked = false } }, restore: function () { if (!disabledInitially) { meta.attr("content", initialContent); $.mobile.zoom.enabled = true } } }) })(jQuery); (function ($, undefined) { $.mobile.behaviors.formReset = { _handleFormReset: function () { this._on(this.element.closest("form"), { reset: function () { this._delay("_reset") } }) } } })(jQuery); (function ($, undefined) { $.widget("mobile.textinput", { initSelector: "input[type='text'],input[type='search'],:jqmData(type='search'),input[type='number'],:jqmData(type='number'),input[type='password'],input[type='email'],input[type='url'],input[type='tel'],textarea,input[type='time'],input[type='date'],input[type='month'],input[type='week'],input[type='datetime'],input[type='datetime-local'],input[type='color'],input:not([type]),input[type='file']", options: { theme: null, corners: true, mini: false, preventFocusZoom: /iPhone|iPad|iPod/.test(navigator.platform) && navigator.userAgent.indexOf("AppleWebKit") > -1, wrapperClass: "", enhanced: false }, _create: function () { var options = this.options, isSearch = this.element.is("[type='search'], :jqmData(type='search')"), isTextarea = this.element[0].tagName === "TEXTAREA", isRange = this.element.is("[data-" + ($.mobile.ns || "") + "type='range']"), inputNeedsWrap = (this.element.is("input") || this.element.is("[data-" + ($.mobile.ns || "") + "type='search']")) && !isRange; if (this.element.prop("disabled")) options.disabled = true; $.extend(this, { classes: this._classesFromOptions(), isSearch: isSearch, isTextarea: isTextarea, isRange: isRange, inputNeedsWrap: inputNeedsWrap }); this._autoCorrect(); !options.enhanced && this._enhance(); this._on({ focus: "_handleFocus", blur: "_handleBlur" }) }, refresh: function () { this.setOptions({ disabled: this.element.is(":disabled") }) }, _enhance: function () { var elementClasses = []; this.isTextarea && elementClasses.push("ui-input-text"); (this.isTextarea || this.isRange) && elementClasses.push("ui-shadow-inset"); if (this.inputNeedsWrap) this.element.wrap(this._wrap()); else elementClasses = elementClasses.concat(this.classes); this.element.addClass(elementClasses.join(" ")) }, widget: function () { return this.inputNeedsWrap ? this.element.parent() : this.element }, _classesFromOptions: function () { var options = this.options, classes = []; classes.push("ui-body-" + (options.theme === null ? "inherit" : options.theme)); options.corners && classes.push("ui-corner-all"); options.mini && classes.push("ui-mini"); options.disabled && classes.push("ui-state-disabled"); options.wrapperClass && classes.push(options.wrapperClass); return classes }, _wrap: function () { return $("<div class='" + (this.isSearch ? "ui-input-search " : "ui-input-text ") + this.classes.join(" ") + " ui-shadow-inset'></div>") }, _autoCorrect: function () { if (typeof this.element[0].autocorrect !== "undefined" && !$.support.touchOverflow) { this.element[0].setAttribute("autocorrect", "off"); this.element[0].setAttribute("autocomplete", "off") } }, _handleBlur: function () { this.widget().removeClass($.mobile.focusClass); this.options.preventFocusZoom && $.mobile.zoom.enable(true) }, _handleFocus: function () { this.options.preventFocusZoom && $.mobile.zoom.disable(true); this.widget().addClass($.mobile.focusClass) }, _setOptions: function (options) { var outer = this.widget(); this._super(options); if (!(options.disabled === undefined && options.mini === undefined && options.corners === undefined && options.theme === undefined && options.wrapperClass === undefined)) { outer.removeClass(this.classes.join(" ")); this.classes = this._classesFromOptions(); outer.addClass(this.classes.join(" ")) } options.disabled !== undefined && this.element.prop("disabled", !!options.disabled) }, _destroy: function () { if (this.options.enhanced) return; this.inputNeedsWrap && this.element.unwrap(); this.element.removeClass("ui-input-text " + this.classes.join(" ")) } }) })(jQuery); (function ($, undefined) { $.widget("mobile.slider", $.extend({ initSelector: "input[type='range'], :jqmData(type='range'), :jqmData(role='slider')", widgetEventPrefix: "slide", options: { theme: null, trackTheme: null, corners: true, mini: false, highlight: false }, _create: function () { var self = this, control = this.element, trackTheme = this.options.trackTheme || $.mobile.getAttribute(control[0], "theme"), trackThemeClass = trackTheme ? " ui-bar-" + trackTheme : " ui-bar-inherit", cornerClass = this.options.corners || control.jqmData("corners") ? " ui-corner-all" : "", miniClass = this.options.mini || control.jqmData("mini") ? " ui-mini" : "", cType = control[0].nodeName.toLowerCase(), isToggleSwitch = cType === "select", isRangeslider = control.parent().is(":jqmData(role='rangeslider')"), selectClass = isToggleSwitch ? "ui-slider-switch" : "", controlID = control.attr("id"), $label = $("[for='" + controlID + "']"), labelID = $label.attr("id") || controlID + "-label", min = !isToggleSwitch ? parseFloat(control.attr("min")) : 0, max = !isToggleSwitch ? parseFloat(control.attr("max")) : control.find("option").length - 1, step = window.parseFloat(control.attr("step") || 1), domHandle = document.createElement("a"), handle = $(domHandle), domSlider = document.createElement("div"), slider = $(domSlider), valuebg = this.options.highlight && !isToggleSwitch ? function () { var bg = document.createElement("div"); bg.className = "ui-slider-bg " + $.mobile.activeBtnClass; return $(bg).prependTo(slider) }() : false, options, wrapper, j, length, i, optionsCount, origTabIndex, side, activeClass, sliderImg; $label.attr("id", labelID); this.isToggleSwitch = isToggleSwitch; domHandle.setAttribute("href", "#"); domSlider.setAttribute("role", "application"); domSlider.className = [this.isToggleSwitch ? "ui-slider ui-slider-track ui-shadow-inset " : "ui-slider-track ui-shadow-inset ", selectClass, trackThemeClass, cornerClass, miniClass].join(""); domHandle.className = "ui-slider-handle"; domSlider.appendChild(domHandle); handle.attr({ role: "slider", "aria-valuemin": min, "aria-valuemax": max, "aria-valuenow": this._value(), "aria-valuetext": this._value(), title: this._value(), "aria-labelledby": labelID }); $.extend(this, { slider: slider, handle: handle, control: control, type: cType, step: step, max: max, min: min, valuebg: valuebg, isRangeslider: isRangeslider, dragging: false, beforeStart: null, userModified: false, mouseMoved: false }); if (isToggleSwitch) { origTabIndex = control.attr("tabindex"); origTabIndex && handle.attr("tabindex", origTabIndex); control.attr("tabindex", "-1").focus(function () { $(this).blur(); handle.focus() }); wrapper = document.createElement("div"); wrapper.className = "ui-slider-inneroffset"; for (j = 0, length = domSlider.childNodes.length; j < length; j++) wrapper.appendChild(domSlider.childNodes[j]); domSlider.appendChild(wrapper); handle.addClass("ui-slider-handle-snapping"); options = control.find("option"); for (i = 0, optionsCount = options.length; i < optionsCount; i++) { side = !i ? "b" : "a"; activeClass = !i ? "" : " " + $.mobile.activeBtnClass; sliderImg = document.createElement("span"); sliderImg.className = ["ui-slider-label ui-slider-label-", side, activeClass].join(""); sliderImg.setAttribute("role", "img"); sliderImg.appendChild(document.createTextNode(options[i].innerHTML)); $(sliderImg).prependTo(slider) } self._labels = $(".ui-slider-label", slider) } control.addClass(isToggleSwitch ? "ui-slider-switch" : "ui-slider-input"); this._on(control, { change: "_controlChange", keyup: "_controlKeyup", blur: "_controlBlur", vmouseup: "_controlVMouseUp" }); slider.bind("vmousedown", $.proxy(this._sliderVMouseDown, this)); this._on(document, { vmousemove: "_preventDocumentDrag" }); this._on(slider.add(document), { vmouseup: "_sliderVMouseUp" }); slider.insertAfter(control); if (!isToggleSwitch && !isRangeslider) { wrapper = this.options.mini ? "<div class='ui-slider ui-mini'>" : "<div class='ui-slider'>"; control.add(slider).wrapAll(wrapper) } this._on(this.handle, { vmousedown: "_handleVMouseDown", keydown: "_handleKeydown", keyup: "_handleKeyup" }); this._handleFormReset(); this.refresh(undefined, undefined, true, true) }, _setOptions: function (options) { options.theme !== undefined && this._setTheme(options.theme); options.trackTheme !== undefined && this._setTrackTheme(options.trackTheme); options.corners !== undefined && this._setCorners(options.corners); options.mini !== undefined && this._setMini(options.mini); options.highlight !== undefined && this._setHighlight(options.highlight); options.disabled !== undefined && this._setDisabled(options.disabled); this._super(options) }, _controlChange: function (event) { if (this._trigger("controlchange", event) === false) return false; !this.mouseMoved && this.refresh(this._value(), true) }, _controlKeyup: function () { this.refresh(this._value(), true, true) }, _controlBlur: function () { this.refresh(this._value(), true) }, _controlVMouseUp: function () { this._checkedRefresh() }, _handleVMouseDown: function () { this.handle.focus() }, _handleKeydown: function (event) { var index = this._value(); if (this.options.disabled) return; switch (event.keyCode) { case $.mobile.keyCode.HOME: case $.mobile.keyCode.END: case $.mobile.keyCode.PAGE_UP: case $.mobile.keyCode.PAGE_DOWN: case $.mobile.keyCode.UP: case $.mobile.keyCode.RIGHT: case $.mobile.keyCode.DOWN: case $.mobile.keyCode.LEFT: event.preventDefault(); if (!this._keySliding) { this._keySliding = true; this.handle.addClass("ui-state-active") } break } switch (event.keyCode) { case $.mobile.keyCode.HOME: this.refresh(this.min); break; case $.mobile.keyCode.END: this.refresh(this.max); break; case $.mobile.keyCode.PAGE_UP: case $.mobile.keyCode.UP: case $.mobile.keyCode.RIGHT: this.refresh(index + this.step); break; case $.mobile.keyCode.PAGE_DOWN: case $.mobile.keyCode.DOWN: case $.mobile.keyCode.LEFT: this.refresh(index - this.step); break } }, _handleKeyup: function () { if (this._keySliding) { this._keySliding = false; this.handle.removeClass("ui-state-active") } }, _sliderVMouseDown: function (event) { if (this.options.disabled || !(event.which === 1 || event.which === 0 || event.which === undefined)) return true; if (this._trigger("beforestart", event) === false) return false; this.dragging = true; this.userModified = false; this.mouseMoved = false; if (this.isToggleSwitch) this.beforeStart = this.element[0].selectedIndex; this.refresh(event); this._trigger("start"); return true }, _sliderVMouseUp: function () { if (this.dragging) { this.dragging = false; if (this.isToggleSwitch) { this.handle.addClass("ui-slider-handle-snapping"); if (this.mouseMoved) if (this.userModified) this.refresh(this.beforeStart === 0 ? 1 : 0); else this.refresh(this.beforeStart); else this.refresh(this.beforeStart === 0 ? 1 : 0) } this.mouseMoved = false; this._trigger("stop") } }, _preventDocumentDrag: function (event) { if (this._trigger("drag", event) === false) return false; if (this.dragging && !this.options.disabled) { this.mouseMoved = true; this.isToggleSwitch && this.handle.removeClass("ui-slider-handle-snapping"); this.refresh(event); this.userModified = this.beforeStart !== this.element[0].selectedIndex; return false } }, _checkedRefresh: function () { this.value !== this._value() && this.refresh(this._value()) }, _value: function () { return this.isToggleSwitch ? this.element[0].selectedIndex : parseFloat(this.element.val()) }, _reset: function () { this.refresh(undefined, false, true) }, refresh: function (val, isfromControl, preventInputUpdate) { var self = this, parentTheme = $.mobile.getAttribute(this.element[0], "theme"), theme = this.options.theme || parentTheme, themeClass = theme ? " ui-btn-" + theme : "", trackTheme = this.options.trackTheme || parentTheme, trackThemeClass = trackTheme ? " ui-bar-" + trackTheme : " ui-bar-inherit", cornerClass = this.options.corners ? " ui-corner-all" : "", miniClass = this.options.mini ? " ui-mini" : "", left, width, data, tol, pxStep, percent, control, isInput, optionElements, min, max, step, newval, valModStep, alignValue, percentPerStep, handlePercent, aPercent, bPercent, valueChanged; self.slider[0].className = [this.isToggleSwitch ? "ui-slider ui-slider-switch ui-slider-track ui-shadow-inset" : "ui-slider-track ui-shadow-inset", trackThemeClass, cornerClass, miniClass].join(""); (this.options.disabled || this.element.prop("disabled")) && this.disable(); this.value = this._value(); if (this.options.highlight && !this.isToggleSwitch && this.slider.find(".ui-slider-bg").length === 0) this.valuebg = function () { var bg = document.createElement("div"); bg.className = "ui-slider-bg " + $.mobile.activeBtnClass; return $(bg).prependTo(self.slider) }(); this.handle.addClass("ui-btn" + themeClass + " ui-shadow"); control = this.element; isInput = !this.isToggleSwitch; optionElements = isInput ? [] : control.find("option"); min = isInput ? parseFloat(control.attr("min")) : 0; max = isInput ? parseFloat(control.attr("max")) : optionElements.length - 1; step = isInput && parseFloat(control.attr("step")) > 0 ? parseFloat(control.attr("step")) : 1; if (typeof val === "object") { data = val; tol = 8; left = this.slider.offset().left; width = this.slider.width(); pxStep = width / ((max - min) / step); if (!this.dragging || data.pageX < left - tol || data.pageX > left + width + tol) return; if (pxStep > 1) percent = (data.pageX - left) / width * 100; else percent = Math.round((data.pageX - left) / width * 100) } else { if (val == null) val = isInput ? parseFloat(control.val() || 0) : control[0].selectedIndex; percent = (parseFloat(val) - min) / (max - min) * 100 } if (isNaN(percent)) return; newval = percent / 100 * (max - min) + min; valModStep = (newval - min) % step; alignValue = newval - valModStep; if (Math.abs(valModStep) * 2 >= step) alignValue += valModStep > 0 ? step : -step; percentPerStep = 100 / ((max - min) / step); newval = parseFloat(alignValue.toFixed(5)); if (typeof pxStep === "undefined") pxStep = width / ((max - min) / step); if (pxStep > 1 && isInput) percent = (newval - min) * percentPerStep * (1 / step); if (percent < 0) percent = 0; if (percent > 100) percent = 100; if (newval < min) newval = min; if (newval > max) newval = max; this.handle.css("left", percent + "%"); this.handle[0].setAttribute("aria-valuenow", isInput ? newval : optionElements.eq(newval).attr("value")); this.handle[0].setAttribute("aria-valuetext", isInput ? newval : optionElements.eq(newval).getEncodedText()); this.handle[0].setAttribute("title", isInput ? newval : optionElements.eq(newval).getEncodedText()); this.valuebg && this.valuebg.css("width", percent + "%"); if (this._labels) { handlePercent = this.handle.width() / this.slider.width() * 100; aPercent = percent && handlePercent + (100 - handlePercent) * percent / 100; bPercent = percent === 100 ? 0 : Math.min(handlePercent + 100 - aPercent, 100); this._labels.each(function () { var ab = $(this).hasClass("ui-slider-label-a"); $(this).width((ab ? aPercent : bPercent) + "%") }) } if (!preventInputUpdate) { valueChanged = false; if (isInput) { valueChanged = control.val() !== newval; control.val(newval) } else { valueChanged = control[0].selectedIndex !== newval; control[0].selectedIndex = newval } if (this._trigger("beforechange", val) === false) return false; !isfromControl && valueChanged && control.trigger("change") } }, _setHighlight: function (value) { value = !!value; if (value) { this.options.highlight = !!value; this.refresh() } else if (this.valuebg) { this.valuebg.remove(); this.valuebg = false } }, _setTheme: function (value) { this.handle.removeClass("ui-btn-" + this.options.theme).addClass("ui-btn-" + value); var currentTheme = this.options.theme ? this.options.theme : "inherit", newTheme = value ? value : "inherit"; this.control.removeClass("ui-body-" + currentTheme).addClass("ui-body-" + newTheme) }, _setTrackTheme: function (value) { var currentTrackTheme = this.options.trackTheme ? this.options.trackTheme : "inherit", newTrackTheme = value ? value : "inherit"; this.slider.removeClass("ui-body-" + currentTrackTheme).addClass("ui-body-" + newTrackTheme) }, _setMini: function (value) { value = !!value; if (!this.isToggleSwitch && !this.isRangeslider) { this.slider.parent().toggleClass("ui-mini", value); this.element.toggleClass("ui-mini", value) } this.slider.toggleClass("ui-mini", value) }, _setCorners: function (value) { this.slider.toggleClass("ui-corner-all", value); !this.isToggleSwitch && this.control.toggleClass("ui-corner-all", value) }, _setDisabled: function (value) { value = !!value; this.element.prop("disabled", value); this.slider.toggleClass("ui-state-disabled", value).attr("aria-disabled", value) } }, $.mobile.behaviors.formReset)) })(jQuery) })