var AppCommon; !function (e) {
    var t = function () { function e() { } return e }(); t.AssignTomeOption = "rdoMe_id", t.BusinessQueuesLookupId = "businessqueues_id", t.DialogCancelId = "cancel_id", t.DialogOkId = "ok_id", t.OwnerId = "owner_id", t.OwnerType = "owner_type", t.QueueItemAssignedToUserText = "lbl_assignedtouser", t.QueueItemAssignedToQueueText = "lbl_addtoqueue", t.QueueItemRouteHeaderText = "lbl_headerdescription", t.QueueItemQueueLookupId = "crmQueueLookupControl_id", t.QueueItemRemoveId = "chkBoxRemoveItem_id", t.QueueItemRouteToId = "routeto_id", t.QueueItemUserLookupId = "crmUserLookupControl_id", t.SelectedRecordsCount = "selected_records_count", t.ShowAssignToMeOption = "show_assign_to_me_option", t.SystemUserViewId = "systemuserview_id", t.LastButtonClicked = "last_button_clicked", t.LastButtonClickedParam = "param_lastButtonClicked", t.RecordsParam = "param_records", t.CalendarName = "Schedule_Name", t.CalendarDescription = "Schedule_Description", t.CalendarHeader = "Schedule_header", t.CalendarGrid = "Calendar_Grid", t.CalendarType = "Calendar_Type", t.CalendarRecord = "Calendar_Record", t.CalendarFormName = "name", t.CalendarFormDescription = "description", t.Customer_Service_Schedule_View_Id = "F4D446E0-3749-4BA4-9C85-EAB861EAFDFC", t.Holiday_Schedule_View_Id = "06453A1D-9288-4F0E-9351-819D619ECB5F", t.CustomerServiceScheduleType = "1", t.HolidayScheduleType = "2", t.MDD_CSS_PARAM_WeeklyScheduleControl_Input = "weeklyScheduleControl_Input", t.MDD_PARAM_Calendar_Id_Input = "calendar_Id", t.MDD_CSS_PARAM_Calendar_ShareControl_Input = "calendarShareControl_Input", t.MDD_CSS_PARAM_WeeklyScheduleControl_Output = "weeklyScheduleControl_Output", t.MDD_CSS_PARAM_CustomerServiceSchedule_Status = "customerServiceSchedule_Status", t.MDD_CSS_PARAM_SetWorkHourControl_Input = "setWorkHourControl_Input", t.MDD_CSS_PARAM_SetWorkHourControl_Output = "setWorkHourControl_Output", t.MDD_CSS_PARAM_DeleteWeeklyScheduleStatus_Output = "deleteWeeklyScheduleStatus_Output", t.MDD_CSS_Dialog_CalendarRule_Warning = "CalendarRule_Warning", t.MDD_CSS_SaveButton_Id = "savecalendarrule_id", t.MDD_CSS_SaveAndCloseButton_Id = "saveandclosecalendarrule_id", t.MDD_SetWorkHours_OKButton_Id = "oktimesheetdetails_id", t.MDD_CSS_PARAM_HolidayListControl_Input = "holidayListControl_Input", t.MDD_HS_DoneButtonId = "save_id", t.MDD_HolidayItem_Param_State = "holidayItem_state", t.MDD_HolidayItem_Param_Calendar_Id = "calendar_id", t.MDD_HolidayItem_Param_CalendarRule_Id = "calendarRule_id", t.ErrorMsg_Dialog_Load_Failed = "Error_DialogLoadFailed", t.ErrorMsg_Dialog_Save_Failed = "Error_DialogSaveFailed", t.EntitySystemUser = "systemuser", t.PrivateQueueViewName = "QueueItem_Private_Queue_LookUp", t.QueueItem_FetchXml = "<fetch version='1.0' mapping='logical'><entity name='systemuser'>'+'<order attribute='fullname' descending='false' /><attribute name='systemuserid' /><attribute name='fullname' /><link-entity name='queuemembership' from='systemuserid' to='systemuserid' alias='QueueMembers'><filter type='and'><condition attribute='queueid' operator='eq' value='{0}' /></filter></link-entity></entity></fetch>", t.QueueItem_LayoutXml = "<grid name='systemuser' object='8' jump='name' select='1' icon='1' preview='0'><row name='systemuser' id='systemuserid'><cell name='fullname' width='300' /><cell name='systemuserid' width='0' ishidden='1'/></row></grid>", e.DialogConstants = t; var i = function () { function e() { } return e }(); i.AddToQueueDialog = "AddToQueue", i.CreateOrUpdateCustomerServiceScheduleRule = "CreateOrUpdateCustomerServiceScheduleRule", i.CreateOrUpdateHolidayItem = "CreateOrUpdateHolidayItem", e.DialogName = i
}(AppCommon || (AppCommon = {})); var AppCommon; !function (e) { var t = function () { function e() { } return e }(); t.Account = "account", t.Contact = "contact", t.CustomerAddress = "customeraddress", t.ConvertRule = "convertrule", t.Mailbox = "mailbox", t.Queue = "queue", t.QueueItem = "queueitem", t.SystemUser = "systemuser", t.Team = "team", t.Territory = "territory", t.CalendarRule = "calendarrule", t.Goal = "goal", t.Metric = "metric", t.RollupField = "rollupfield", t.GoalRollupQuery = "goalrollupquery", t.Calendar = "calendar", e.EntityNames = t; var i = function () { function e() { } return e }(); i.SystemUser = 8, i.Team = 9, i.SocialActivity = 4216, i.Email = 4202, i.Queue = 2020, e.EntityTypeCode = i }(AppCommon || (AppCommon = {})); var AppCommon; !function (e) {
    var t = function () { function e() { } return e }();
    t.setQueueItemIdToEachRecord = function (e, t) {
        for (var i = e.getGrid().getSelectedRows(), o = 0; o < t.length; o++) {
            var n = i.get(o), a = "", l = "", r = null;
            if (r = ClientUtility.ClientUtil.isUCI() ? n.getData().getEntity().attributes : n.getData().attributes || n.getData().getEntity().getAttributes()) {
                for (var u = r.getAll(), s = 0; s < u.length; ++s) {
                    var d = u[s]; if (("queueitemid" === d.getName() || !ClientUtility.ClientUtil.isUCI() && "queueitemid" === d.getKey()) &&
                        (a = d.getValue()),
                        "queueid" === d.getName()) {
                        var m = d.getValue(); m.length > 0 && (l = m[0].id)
                    }
                } l && (t[o].QueueId = l), a && (t[o].Id = a)
            } t[o].TypeCode = 2029
        }
    }, t.OpenAlertDialogForMultipleError = function (e) { var i = { text: void 0 }; i.text = t.GetLabel("Error_Message_Action_MultipleErrorsFound"), Xrm.Navigation.openAlertDialog(i, null).then(function () { e && Xrm.Page.ui && Xrm.Page.ui.close() }) }, t.GetLabel = function (t) { return e.ResourceStringProvider ? e.ResourceStringProvider.getResourceString(t) : t }, e.QueueItemUtils = t
}(AppCommon || (AppCommon = {})); var AppCommon; !function (e) {
    var t = function () { function e() { } return e }(); t.EntityRecords = "entity_records", t.LastButtonClicked = "param_lastButtonClicked"; var i = function () { function e() { } return e }(); i.OkButton = "ok_id", i.CancelButton = "cancel_id", i.RemoveQueueItemPickId = "checkboxpick_id", i.QueueItemPickHeaderText = "lbl_headerdescription";
    var o = function () {
        function o() {
            var o = this;
            this.OpenQueueItemPickDialog = function (i, n, a) {
                ClientUtility.CommandBarActions.isMobileCompanionApp() || e.QueueItemUtils.setQueueItemIdToEachRecord(i, n);
                var l = {};
                l[t.EntityRecords] = JSON.stringify(n.map(function (t) {
                    return {
                        TypeName: e.EntityNames.QueueItem, Id: t.Id, Name: t.Name
                    }
                }));
                Xrm.Navigation.openDialog("QueueItemPick", { height: 350, width: 550, position: 1 }, l).then(function (e) { return o.DialogCloseCallback(i, e) })
            },
                this.DialogCloseCallback = function (e, o) {
                    e && e.refresh && o.parameters[t.LastButtonClicked] === i.OkButton && e.refresh()
                },
                this.QueueItemDialogPickClick = function (o) {
                    if (ClientUtility.ClientUtil.isMobileOffline())
                        return void ClientUtility.DialogUtil.showMoCAOfflineError();
                    var n = ClientUtility.DataUtil.isNullOrUndefined(o) ? Xrm.Page : o.getFormContext(); ClientUtility.DialogUtil.setAttributeValue(t.LastButtonClicked, i.OkButton, n); var a = n.data.attributes.get(t.EntityRecords); if (a) {
                        var l = n.data.attributes.get(i.RemoveQueueItemPickId), r = !1; l.getValue() && (r = !0); var u = a.getValue(), s = JSON.parse(u); ClientUtility.DialogUtil.showProgressMessage(); var d = { id: n.context.getUserId(), entityType: e.EntityNames.SystemUser }, m = s.map(function (e) { var t = { entityType: e.TypeName, id: ClientUtility.Guid.create(e.Id) }, i = new ODataContract.PickFromQueueRequest(t, d, r); return i }); Xrm.WebApi.online.executeMultiple(m).then(
                            function (e) {
                                ClientUtility.DialogUtil.hideProgressMessage(), n.ui.close()
                            }, ClientUtility.DialogUtil.actionFailedCallbackForMoca)
                    }
                },
                this.CloseDialog = function (e) {
                    var o = ClientUtility.DataUtil.isNullOrUndefined(e) ? Xrm.Page : e.getFormContext(); ClientUtility.DialogUtil.setAttributeValue(t.LastButtonClicked, i.CancelButton), o.ui.close()
                },
                this.QueueItemDialogPickOnLoad = function (o) {
                    var n = ClientUtility.DataUtil.isNullOrUndefined(o) ? Xrm.Page : o.getFormContext(), a = n.ui.controls.get(i.RemoveQueueItemPickId); a && a.setFocus();
                    var l = n.data.attributes.get(t.EntityRecords); if (l) {
                        var r = l.getValue(), u = JSON.parse(r), s = n.ui.controls.get(i.QueueItemPickHeaderText);
                        if (s) if (1 === u.length) s.setLabel(e.ResourceStringProvider.getResourceString("Dialog_QueueItemPick_Description_Single"));
                        else {
                            var d = e.ResourceStringProvider.getResourceString("Dialog_QueueItemPick_Description_Plural"),
                                m = ClientUtility.StringUtil.format(d, u.length); s.setLabel(m)
                        }
                    }
                }
        } return o
    }();
    e.QueueItemPickLibrary = o

}(AppCommon || (AppCommon = {})); var AppCommon; !function (e) {
    var t = function () {
        function t() {
            var t = this; this.GetLabel = function (t) { return e.ResourceStringProvider ? e.ResourceStringProvider.getResourceString(t) : t }, this.OpenQueueItemReleaseDialog = function (i, o, n) {
                ClientUtility.CommandBarActions.isMobileCompanionApp() ||
                    e.QueueItemUtils.setQueueItemIdToEachRecord(i, o); var a = { width: 450, height: 200, position: 1 }, l = { text: t.GetLabel("Dialog_QueueItemRelease_Label_Single"), title: t.GetLabel("Dialog_QueueItemRelease_Title"), confirmButtonLabel: t.GetLabel("Button_Label_Release"), cancelButtonLabel: t.GetLabel("Button_Label_Cancel") }; if (1 == o.length) l.subtitle = t.GetLabel("Dialog_QueueItemReleaseNew_Description_Single"); else { var r = t.GetLabel("Dialog_QueueItemReleaseNew_Description_Plural"); l.subtitle = ClientUtility.StringUtil.format(r, o.length) } Xrm.Navigation.openConfirmDialog(l, a).then(function (n) { return t.PerformReleaseAction(n, i, o.map(function (t) { return { TypeName: e.EntityNames.QueueItem, Id: t.Id, Name: t.Name } })) })
            }, this.PerformReleaseAction = function (e, t, i) { if (e && e.confirmed) { if (ClientUtility.ClientUtil.isMobileOffline()) return void ClientUtility.DialogUtil.showMoCAOfflineError(); ClientUtility.DialogUtil.showProgressMessage(); var o = i.map(function (e) { var t = { id: ClientUtility.Guid.create(e.Id), entityType: e.TypeName }, i = new ODataContract.ReleaseToQueueRequest(t); return i }); Xrm.WebApi.online.executeMultiple(o).then(function (e) { ClientUtility.DialogUtil.hideProgressMessage(), t && t.refresh() }, ClientUtility.DialogUtil.actionFailedCallbackForMoca) } }
        } return t
    }(); e.QueueItemReleaseLibrary = t
}(AppCommon || (AppCommon = {})); var AppCommon; !function (e) {
    var t = function () {
        function t() {
            var t = this; this.GetLabel = function (t) { return e.ResourceStringProvider ? e.ResourceStringProvider.getResourceString(t) : t }, this.OpenQueueItemRemoveDialog = function (i, o, n) {
                ClientUtility.CommandBarActions.isMobileCompanionApp() ||
                    e.QueueItemUtils.setQueueItemIdToEachRecord(i, o); var a, l = { width: 450, height: 200, position: 1 }; 1 == o.length ? a = t.GetLabel("Dialog_QueueItemRemoveNew_Description_Single") : (a = t.GetLabel("Dialog_QueueItemRemoveNew_Description_Plural"), a = ClientUtility.StringUtil.format(a, o.length)); var r = { text: a, title: t.GetLabel("Dialog_QueueItemRemove_Title"), confirmButtonLabel: t.GetLabel("Button_Label_Remove"), cancelButtonLabel: t.GetLabel("Button_Label_Cancel") }; Xrm.Navigation.openConfirmDialog(r, l).then(function (n) { n.confirmed && t.PerformRemoveAction(n, i, o.map(function (t) { return { TypeName: e.EntityNames.QueueItem, Id: t.Id, Name: t.Name } })) })
            }, this.PerformRemoveAction = function (e, i, o) { if (ClientUtility.ClientUtil.isMobileOffline()) return void ClientUtility.DialogUtil.showMoCAOfflineError(); ClientUtility.DialogUtil.showProgressMessage(); var n = o.map(function (e) { var t = { id: ClientUtility.Guid.create(e.Id), entityType: e.TypeName }, i = new ODataContract.RemoveFromQueueRequest(t); return i }); n.length > 1 ? Xrm.WebApi.online.executeMultiple(n).then(function (e) { ClientUtility.DialogUtil.hideProgressMessage(), e.forEach(function (e) { return e.ok ? void 0 : void t.OpenAlertDialogForMultipleError(!1) }), i && i.refresh() }, ClientUtility.DialogUtil.actionFailedCallbackForMoca) : 1 == n.length && Xrm.WebApi.online.execute(n[0]).then(function (e) { ClientUtility.DialogUtil.hideProgressMessage(), i && i.refresh() }, ClientUtility.DialogUtil.actionFailedCallbackForMoca) }, this.OpenAlertDialogForMultipleError = function (e) { var i = { text: void 0 }; i.text = t.GetLabel("Error_Message_Action_MultipleErrorsFound"), Xrm.Navigation.openAlertDialog(i, null).then(function () { e && Xrm.Page.ui && Xrm.Page.ui.close() }) }
        } return t
    }(); e.QueueItemRemoveLibrary = t
}(AppCommon || (AppCommon = {})); var AppCommon; !function (e) {
    var t = function () {
        function t() {
            var t = this; this.OpenQueueItemRoutingDialog = function (i, o, n) {
                ClientUtility.CommandBarActions.isMobileCompanionApp() ||
                    e.QueueItemUtils.setQueueItemIdToEachRecord(i, o); var a = {}; a.height = 340, a.width = 500; var l = {}; l[e.DialogConstants.RecordsParam] = JSON.stringify(o); Xrm.Navigation.openDialog("RouteQueuedItem", a, l).then(function (e) { return t.queueItemDialogCloseCallback(i, e) })
            }, this.OpenFormForItemInQueue = function (t, i, o) { if (t && t.length) { var n; if (ClientUtility.ClientUtil.isUCI()) n = t[0].Id; else if (o) { var a = o, l = a.GetRecordsFromInnerGrid(!0), r = l[0], u = r[3]; n = u ? u.getAttribute("queueitemid") : t[0].Id } else n = t[0].Id; var s = "?$select=_objectid_value,objecttypecode"; Xrm.WebApi.retrieveRecord(e.EntityNames.QueueItem, n, s).then(function (e) { var t = e._objectid_value, i = e["_objectid_value@Microsoft.Dynamics.CRM.lookuplogicalname"], o = { entityId: t, entityName: i }; Xrm.Navigation.openForm(o) }, function (t) { var i = { entityId: n, entityName: e.EntityNames.QueueItem }; Xrm.Navigation.openForm(i) }) } }, this.OpenQueueItemDetailsForm = function (t, i) { if (i && i.length > 0 && 1 === i.length) { var o; if (ClientUtility.ClientUtil.isUCI()) o = i[0].Id; else { var n = t, a = n.GetRecordsFromInnerGrid(!0), l = a[0], r = l[3]; r && (o = r.getAttribute("queueitemid")) } var u = { entityId: o, entityName: e.EntityNames.QueueItem, openInNewWindow: !0 }; Xrm.Navigation.openForm(u) } }, this.queueItemDialogRouteClick = function (i) { var o = ClientUtility.DataUtil.isNullOrUndefined(i) ? Xrm.Page : i.getFormContext(); if (ClientUtility.ClientUtil.isMobileOffline()) return void ClientUtility.DialogUtil.showMoCAOfflineError(); ClientUtility.DialogUtil.setLastButtonClicked(e.DialogConstants.DialogOkId); var n = !1, a = o.data.attributes.get(e.DialogConstants.QueueItemRouteToId), l = !1; a.getValue() && (n = !0); var r = null; if (n) { r = t.getRouteToUserEntityReference(o); var u = o.data.attributes.get(e.DialogConstants.QueueItemRemoveId); u.getValue() && (l = !0) } else r = t.getRouteToQueueEntityReference(o); var s = o.data.attributes.get(e.DialogConstants.RecordsParam); if (s) { var d = s.getValue(), m = JSON.parse(d); t.sendBatchRouteRequest(r, m, l, function () { Xrm.Page.ui.close() }) } }, this.queueItemDialogRouteToChange = function (t) { var i = ClientUtility.DataUtil.isNullOrUndefined(t) ? Xrm.Page : t.getFormContext(), o = i.data.attributes.get(e.DialogConstants.QueueItemRouteToId), n = i.getControl(e.DialogConstants.QueueItemRemoveId), a = i.getControl(e.DialogConstants.QueueItemQueueLookupId), l = i.getControl(e.DialogConstants.QueueItemUserLookupId), r = i.getControl(e.DialogConstants.QueueItemAssignedToQueueText), u = i.getControl(e.DialogConstants.QueueItemAssignedToUserText); o.getValue() ? (!ClientUtility.DataUtil.isNullOrUndefined(a) && a.setVisible(!1), !ClientUtility.DataUtil.isNullOrUndefined(r) && r.setVisible(!1), !ClientUtility.DataUtil.isNullOrUndefined(l) && l.setVisible(!0), !ClientUtility.DataUtil.isNullOrUndefined(u) && u.setVisible(!0), !ClientUtility.DataUtil.isNullOrUndefined(n) && n.setVisible(!0)) : (!ClientUtility.DataUtil.isNullOrUndefined(u) && u.setVisible(!1), !ClientUtility.DataUtil.isNullOrUndefined(n) && n.setVisible(!1), !ClientUtility.DataUtil.isNullOrUndefined(l) && l.setVisible(!1), !ClientUtility.DataUtil.isNullOrUndefined(r) && r.setVisible(!0), !ClientUtility.DataUtil.isNullOrUndefined(a) && a.setVisible(!0)) }, this.queueItemDialogRouteOnLoad = function (i) { var o = [], n = ClientUtility.DataUtil.isNullOrUndefined(i) ? Xrm.Page : i.getFormContext(), a = n.ui.controls.get(e.DialogConstants.QueueItemRouteToId); a && a.setFocus(); var l = n.data.attributes.get(e.DialogConstants.RecordsParam); if (l) { var r = l.getValue(); o = JSON.parse(r); var u = n.ui.controls.get(e.DialogConstants.QueueItemRouteHeaderText); if (u && e.ResourceStringProvider) { var s = ""; 1 === o.length ? s = e.ResourceStringProvider.getResourceString("Dialog_QueueItemRoute_Description_Single") : (s = e.ResourceStringProvider.getResourceString("Dialog_QueueItemRoute_Description_Plural"), s = ClientUtility.StringUtil.format(s, o.length)), s && u.setLabel(s) } } var d = n.ui.controls.get(e.DialogConstants.QueueItemRemoveId); d && d.setVisible(!1); var m = n.ui.controls.get(e.DialogConstants.QueueItemAssignedToUserText); m && m.setVisible(!1); var c = n.ui.controls.get(e.DialogConstants.QueueItemUserLookupId); c && (c.setVisible(!1), o && 1 == o.length && t.addCustomViewForQueueItem(n, c)) }, this.queueItemDialogRouteLookupChange = function (t) { var i = ClientUtility.DataUtil.isNullOrUndefined(t) ? Xrm.Page : t.getFormContext(), o = i.data.attributes.get(e.DialogConstants.QueueItemRouteToId), n = null; if (n = o.getValue() ? i.data.attributes.get(e.DialogConstants.QueueItemUserLookupId) : i.data.attributes.get(e.DialogConstants.QueueItemQueueLookupId)) { var a = n.getValue(), l = i.getControl(e.DialogConstants.DialogOkId); if (!l) return; a && a.length ? l.setDisabled(!1) : l.setDisabled(!0) } }, this.sendBatchRouteRequest = function (t, i, o, n) { ClientUtility.DialogUtil.showProgressMessage(); var a = i.map(function (e) { var i = { id: ClientUtility.Guid.create(e.Id), entityType: e.TypeName }; return new ODataContract.RouteToRequest(t, i) }); Xrm.WebApi.online.executeMultiple(a).then(function (t) { if (t.length !== i.length) return e.QueueItemUtils.OpenAlertDialogForMultipleError(!1), n(), void ClientUtility.DialogUtil.hideProgressMessage(); if (o) { var a = i.filter(function (e, i) { return t[i].ok === !0 }), l = a.map(function (e) { var t = { id: ClientUtility.Guid.create(e.Id), entityType: e.TypeName }; return new ODataContract.RemoveFromQueueRequest(t) }); Xrm.WebApi.online.executeMultiple(l).then(function (t) { t.some(function (e) { return !e.ok }) && e.QueueItemUtils.OpenAlertDialogForMultipleError(!1), n(), ClientUtility.DialogUtil.hideProgressMessage() }, ClientUtility.DialogUtil.actionFailedCallbackForMoca) } else n(), ClientUtility.DialogUtil.hideProgressMessage() }, ClientUtility.DialogUtil.actionFailedCallbackForMoca) }, this.getRouteToUserEntityReference = function (t) { var i = null, o = t.data.attributes.get(e.DialogConstants.QueueItemUserLookupId); if (o) { var n = o.getValue(), a = n[0].id, l = n[0].entityType; a && l && (i = { id: a, entityType: l }) } return i }, this.getRouteToQueueEntityReference = function (t) { var i = null, o = t.data.attributes.get(e.DialogConstants.QueueItemQueueLookupId); if (o) { var n = o.getValue(), a = n[0].id; i = { entityType: e.EntityNames.Queue, id: a } } return i }, this.queueItemDialogCloseCallback = function (t, i) { var o = e.DialogConstants; t && t.refresh && i.parameters[o.LastButtonClickedParam] && i.parameters[o.LastButtonClickedParam] === o.DialogOkId && t.refresh() }, this.addCustomViewForQueueItem = function (t, i) { var o = "{abc5d973-aac3-428e-9e1d-e43478f9ee56}", n = JSON.parse(t.data.attributes.get(e.DialogConstants.RecordsParam).getValue()); if (n.length > 0) { var a = n[0].QueueId; if (a) { var l = a.replace(/[{}]/g, ""), r = "?$select=queueviewtype"; Xrm.WebApi.online.retrieveRecord(e.EntityNames.Queue, l, r).then(function (t) { if (1 == t.queueviewtype) { var n = String.format(e.DialogConstants.QueueItem_FetchXml, a), l = e.ResourceStringProvider.getResourceString(e.DialogConstants.PrivateQueueViewName); i.addCustomView(o, e.DialogConstants.EntitySystemUser, l, n, e.DialogConstants.QueueItem_LayoutXml, !0) } }, ClientUtility.DialogUtil.actionFailedCallbackForMoca) } } }
        } return t
    }(); e.QueueItemCommandBarActions = new t, e.QueueItemPick = new e.QueueItemPickLibrary, e.QueueItemRelease = new e.QueueItemReleaseLibrary, e.QueueItemRemove = new e.QueueItemRemoveLibrary
}(AppCommon || (AppCommon = {}));
