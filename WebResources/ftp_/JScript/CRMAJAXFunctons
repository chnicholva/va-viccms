//CrmAjaxFunctions.js
//Contains CRM Odata jQuery/AJAX functions
if (typeof (CrmAjaxFunctions) === "undefined") {
    CrmAjaxFunctions = { __namespace: true };
}

CrmAjaxFunctions =
{
    RetrieveAll: function (entityName, columns, filter, asyncFlag) {
        try {
            var deferred = new $.Deferred();
            var allRecords = [];
            this.RunQuery(entityName, columns, filter, asyncFlag)
                .done(
                    function RunQueryAllSuccess(result) {
                        // add the elements to the collection
                        allRecords = allRecords.concat(result.d.results);
                        if (result.d.__next) {
                            // the success-handler will be this function
                            CrmAjaxFunctions.RunQueryUrl(result.d.__next, asyncFlag)
                                .done(
                                    RunQueryAllSuccess
                                )
                                .fail(
                                    deferred.reject
                                );
                            // call the progressCallbacks of the promise
                            deferred.notify(result);
                        }
                        else {
                            deferred.resolve(allRecords);
                        }
                    })
                .fail(
                    deferred.reject
                    );
            return deferred.promise();
        }
        catch (e) {
            CommonScript.WriteToCRMErrorLog(e, entityName, "CrmAjaxFunctions.RunQuery", "JavaScript");
            alert("Error in CrmAjaxFunctions.RetrieveAll: " + e.message);
        }
    },
    RunQuery: function (entityName, columns, filter, asyncFlag) {
        try {
            // default is 'true'
            var async = true;
            if (asyncFlag !== undefined) {
                async = asyncFlag;
            }

            // in case filter is empty 
            if (filter !== undefined) {
                filter = "&$filter=" + encodeURIComponent(filter);
            } else {
                filter = "";
            }

            // create defered object
            var setName = entityName + "Set";
            var query = GlobalVariables.CrmServerUrl() + GlobalVariables.CrmOdataEndPoint() + "/" + setName + "?$select=" + columns + filter;
            return this.RunQueryUrl(query, async);
        }
        catch (e) {
            CommonScript.WriteToCRMErrorLog(e, entityName, "CrmAjaxFunctions.RunQuery", "JavaScript");
            alert("Error in CrmAjaxFunctions.RunQuery: " + e.message);
        }
    },
    RunQueryUrl: function (queryUrl, asyncFlag) {
        try {
            return this.ProcessRequest({ url: queryUrl }, asyncFlag);
        }
        catch (e) {
            CommonScript.WriteToCRMErrorLog(e, "", "CrmAjaxFunctions.RunQueryUrl", "JavaScript");
            alert("Error in CrmAjaxFunctions.RunQueryUrl: " + e.message);
        }
    },
    ProcessRequest: function (options, aSync) {
        try {
            //options: { url: query }
            //aSync: true or false
            //returns a promise object

            // default values for the ajax queries
            var ajaxDefaults = {
                type: "GET",
                async: true,
                contentType: "application/json; charset=utf-8",
                datatype: "json",
                beforeSend: function (request) {
                    request.setRequestHeader("Accept", "application/json");
                }
            };

            // merge the default-settings with the options-object
            options = $.extend(ajaxDefaults, options);

            // request could be executed in sync or asyn mode
            options.async = (aSync === undefined) ? true : aSync;

            return $.ajax(options);
        }
        catch (e) {
            CommonScript.WriteToCRMErrorLog(e, "", "CrmAjaxFunctions.ProcessRequest", "JavaScript");
            alert("Error in CrmAjaxFunctions.ProcessRequest: " + e.message);
        }
    },
    GetRequest: function (jsonQuery, aSync, aSyncCallback, skipCount, conditionalFilter, optionArray) {
        var entityData = null;
        try {
            $.ajax({
                type: "GET",
                contentType: "application/json; charset=utf-8",
                datatype: "json",
                url: jsonQuery,
                beforeSend: function (XMLHttpRequest) {
                    XMLHttpRequest.setRequestHeader("Accept", "application/json");
                },
                success: function (data, textStatus, XmlHttpRequest) {
                    entityData = data;
                    if (aSync === true) {
                        aSyncCallback(entityData, skipCount, optionArray);   // aSyncCallback(entityData, skipCount, conditionalFilter, optionArray);
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    //alert("Fail: Ajax Error in CrmAjaxFunctions.GetRequest: " + errorThrown + "\n" + jsonQuery + "\n" + textStatus );
                },
                async: aSync,
                cache: false
            });
        }
        catch (err) {
            CommonScript.WriteToCRMErrorLog(err, "", "CrmAjaxFunctions.GetRequest", "JavaScript");
            alert("An error occured in the CrmAjaxFunctions.GetRequest function.  Error Detail Message: " + err);
        }
        return entityData;
    },
    PostRequest: function (jsonQuery, aSync, jsonEntityData, recordAction, crmGuidFieldName) {
        var crmEntityId = "FAIL";
        try {

            $.ajax({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                datatype: "json",
                url: jsonQuery,
                data: jsonEntityData,
                beforeSend: function (XMLHttpRequest) {
                    XMLHttpRequest.setRequestHeader("Accept", "application/json");
                    if (recordAction === "UPDATE") {
                        XMLHttpRequest.setRequestHeader("X-HTTP-Method", "MERGE");
                    }
                    if (recordAction === "DELETE") {
                        XMLHttpRequest.setRequestHeader("X-HTTP-Method", "DELETE");
                    }
                },
                success: function (data, textStatus, XmlHttpRequest) {
                    if (recordAction === "CREATE") {
                        crmEntityId = data.d[crmGuidFieldName].toString();
                    } else {
                        crmEntityId = "SUCCESS";
                    }
                },
                error: function (XmlHttpRequest, textStatus, errorThrown) {
                    alert("Ajax Error in CrmAjaxFunctions.PostRequest: " + errorThrown + "\n" + textStatus);
                    crmEntityId = "FAIL";
                },
                async: aSync
            });

        }
        catch (err) {
            CommonScript.WriteToCRMErrorLog(err, "", "CrmAjaxFunctions.PostRequest", "JavaScript");
            alert("An error occured in the CrmAjaxFunctions.PostRequest function.  Error Detail Message: " + err);
        }
        return crmEntityId;
    },
    GetMultiple: function (entitySetName, attributeSet, conditionalFilter, sortAttribute, sortDirection, skipCount, aSyncCallback, optionArray) {
        //This function returns a CRM JSON dataset for all entity records matching criteria provided Asyncronously
        //*entitySetName* - is the name of the entity set e.g "ContactSet"
        //*attributeSet* -  is a string containing the Crm Attributes to retrieve e.g. "FirstName, LastName, Telephone1, EMailAddress1"
        //*conditionalFilter* - is the conditional filter value placed on the data values retrived e.g. "StateCode/Value eq 0"  to retrieve active contact records only
        //*sortAttribute* - is a string containing the name of the attribute to sort the result set by e.g. "LastName"
        //*sortDirection* - is a string specifying the sort as Ascending or Descending e.g. "asc" or "desc"
        //*skipCount* - is the starting point in the result (use if more than 50), (Put 0 if not used)
        //*aSyncCallback* - is the name of the function to call when returning the result
        //*optionArray* - is an optional array, that contains additional task specific variables that can be passed between functions

        try {
            var sortFilter = sortAttribute + " " + sortDirection;
           sortFilter = sortFilter.trim();
            var jsonQuery = GlobalVariables.CrmServerUrl() + GlobalVariables.CrmOdataEndPoint() + "/" + entitySetName + "?$select=" + attributeSet + "&$filter=" + conditionalFilter + "&$orderby=" + sortFilter + "&$skip=" + skipCount;
            this.GetRequest(jsonQuery, true, aSyncCallback, skipCount, conditionalFilter, optionArray);
        }
        catch (err) {
            CommonScript.WriteToCRMErrorLog(err, entitySetName, "CrmAjaxFunctions.GetMultiple", "JavaScript");
            alert("An error occured in the CrmAjaxFunctions.GetMultiple function.  Error Detail Message: " + err);
        }
        return;
    },
    GetSingleEntity: function (entitySetName, attributeSet, entityId) {
        //This function returns a CRM JSON dataset for a single entity record based on the entity id provided Syncronously
        //*entitySetName* - is the name of the entity set e.g "ContactSet"
        //*attributeSet* -  is a string containing the Crm Attributes to retrieve e.g. "FirstName, LastName, Telephone1, EMailAddress1"
        //*entityId* - is the Guid for the entity record
        var entityData = null;
        try {
            var entityIdNoBracket = CommonScript.ReformatCRMGuid(entityId);
            var selectString = "(guid" + "'" + entityIdNoBracket + "'" + ")?$select=" + attributeSet;
            var jsonQuery = GlobalVariables.CrmServerUrl() + GlobalVariables.CrmOdataEndPoint() + "/" + entitySetName + selectString;
            entityData = this.GetRequest(jsonQuery, false, "", 0, null, null);
        }
        catch (err) {
            CommonScript.WriteToCRMErrorLog(err, entitySetName, "CrmAjaxFunctions.GetSingleEntity", "JavaScript");
            alert("An error occured in the CrmAjaxFunctions.GetSingleEntity function.  Error Detail Message: " + err);
        }
        return entityData;
    },
    UpdateSingleEntity: function (entitySetName, attributeUpdateString, entityId) {
        //This function updates a basic CRM entity record with new data values
        //*gi_entitySetName* - is the name of the CRM entity set (Case Sensitive)
        //*gi_attributeUpdateString* - is the atributes and values to update, format CrmAttributeName + __ + AttributeTextValue + ~~ + CrmAttributeName + __ + AttributeTextValue
        //*gi_entityId* - is the Guid for the entity record
        try {
            var crmEntityRecord = new Object;
            var entityIdNoBracket = CommonScript.ReformatCRMGuid(entityId);
            var attributeString = attributeUpdateString.split("~~");
            for (var i = 0; i < attributeString.length; i++) {
                var pair = attributeString[i].split("__");
                crmEntityRecord[pair[0]] = pair[1];
            }

            var jsonEntityData = JSON.stringify(crmEntityRecord);
            var jsonQuery = GlobalVariables.CrmServerUrl() + GlobalVariables.CrmOdataEndPoint() + "/" + entitySetName + "(guid" + "'" + entityIdNoBracket + "'" + ")";
            this.PostRequest(jsonQuery, true, jsonEntityData, "UPDATE", "");
        }
        catch (err) {
            CommonScript.WriteToCRMErrorLog(err, entitySetName, "CrmAjaxFunctions.UpdateSingleEntity", "JavaScript");
            alert("An error occured in the CrmAjaxFunctions.UpdateSingleEntity function.  Error Detail Message: " + err);
        }
        return;
    },
    // BEGIN SOAP DEPENDENT CODE BLOCK
    Execution_and_Parameter_Passing_Example: function (ExecutionContext, field1, field2, field3) {
        // this function is here to serve as an example of how to pass an execution context and fields to a JS function
        // this is passed in by checking the "Pass execution" checkbox
        var valueFromContext = ExecutionContext.getEventSource().controls.get(field).getAttribute().getValue();
        // this is passed as a literal entered in the text box. EX: "a_field_name1", "a_field_name2", "a_field_name3", ...
        var theControl = Xrm.Page.ui.controls.get(field1);
    },
    GetRequestObject: function () {  //GetRequestObject: function GetRequestObject() {
        if (window.XMLHttpRequest) {
            return new window.XMLHttpRequest;
        }
        else {
            try {
                return new ActiveXObject("MSXML2.XMLHTTP.3.0");
            }
            catch (ex) {
                return null;
            }
        }
    },
    GetXMLHttpRequest: function () {
        /// <summary>
        ///     Gets the XmlHttpRequest Object.
        ///     Certain browsers and versions of Windows have to be handled differently
        /// </summary>

        var xmlHttp = null;

        try {
            // Opera 8.0+, Firefox, Safari.
            xmlHttp = new XMLHttpRequest();
        }
        catch (e) {
            try {
                // Internet Explorer Browser.
                xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            }
            catch (e) {
                try {
                    // Internet Explorer Browser.
                    xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                catch (e) {
                    // Something went very wrong                    
                    return null;
                }
            }
        }

        return xmlHttp;
    },
    GetEntityASyncJSON: function (entitySet, id, Columns) {
        // call example
        // var entitySet = "AccountSet";
        // var columns = "AccountId eq (guid'" + id + "')&$select=mhi_acounttype";
        // var result = GetEntityASyncJSON(entitySet, id, columns);

        var serverUrl = CrmAjaxFunctions.GetServerUrl();
        var oDataEndpointUrl = serverUrl + "/XRMServices/2011/OrganizationData.svc/";
        oDataEndpointUrl += entitySet + "?$filter=" + Columns;
        var service = CrmAjaxFunctions.GetRequestObject();
        if (service != null) {
            service.open("GET", oDataEndpointUrl, false);
            service.setRequestHeader("X-Requested-Width", "XMLHttpRequest");
            service.setRequestHeader("Accept", "application/json, text/javascript, */*");
            service.onreadystatechange = function () {
                CrmAjaxFunctions.GetEntityASyncJSONCallBack(this);
            };
            service.send();  //service.send(null);
        }
    },
    GetEntityASyncJSONCallBack: function (RetrieveEntityReq) {
        if (retrieveProjectReq.status == 200) {
            // set entityContains
            // var requestResults = eval('(' + service.responseText + ')').d;
            requestResults = RetrieveEntityReq.responseText;
            // return requestResults;
        }
        else {
            alert("Error fetching data in GetEntitySyncJSON function");
        }
    },
    ExecuteFetchXmlRequest: function (fetchXml, onSuccess, onError, async) {
        /// <summary>
        ///     Executes the Fetch XML Request, executing the onSuccess and onError functions as appropriate.  
        ///     If onSuccess is null or reutrns null, a Javascript Object representation of the response will 
        ///     be returned, else the result of onSuccess will be returned.
        /// </summary>
        /// <param name="fetchXml" type="String">
        ///     The Fetch XML to be Exectued.
        ///     This will be XML Encoded.
        /// </param>
        /// <param name="onSuccess" type="function">
        ///     Function that will be called if no errors occur.  
        ///     The Javascript Object representation of the response will be passed in.
        /// </param>
        /// <param name="onError" type="function">Function that will be called if an eror occurs.</param>
        /// <param name="async" type="Boolean"> 
        ///     Controls if the request is performed asynchronously.
        ///     Defaults to false
        /// </param>

        if (async == null) {
            async = false;
        }

        var request = "<request i:type='b:RetrieveMultipleRequest' xmlns:b='http://schemas.microsoft.com/xrm/2011/Contracts' xmlns:i='http://www.w3.org/2001/XMLSchema-instance'>"
            + "    <b:Parameters xmlns:c='http://schemas.datacontract.org/2004/07/System.Collections.Generic'>"
            + "        <b:KeyValuePairOfstringanyType>"
            + "            <c:key>Query</c:key>"
            + "            <c:value i:type='b:FetchExpression'>"
            + "                <b:Query>" + CrmEncodeDecode.CrmXmlEncode(fetchXml)     // parent.CrmEncodeDecode.CrmXmlEncode(sFetchXml);
            + "                </b:Query>"
            + "            </c:value>"
            + "        </b:KeyValuePairOfstringanyType>"
            + "    </b:Parameters>"
            + "    <b:RequestId i:nil='true'/>"
            + "    <b:RequestName>RetrieveMultiple</b:RequestName>"
            + "</request>";

        var response = null;
        var internalOnSuccess;
        if (onSuccess == null) {
            internalOnSuccess = function (r) { response = CrmAjaxFunctions.OnFetchXmlSuccess(r); };
        } else {
            internalOnSuccess = function (r) {
                var temp = CrmAjaxFunctions.OnFetchXmlSuccess(r);
                response = onSuccess(temp);
                if (response == null) {
                    response = temp;
                }
            };
        }

        CrmAjaxFunctions.ExecuteRequest(request, internalOnSuccess, onError, async);
        return response;
    },
    OnFetchXmlSuccess: function (response) {
        /// <summary>Parses the response text, and returns a Javascript Object representation of the it. </summary>
        /// <param name="response" type="String">Response XML from SOAP Request</param>

        // Remove name spaces so XML2jsobj returns valid property names
        // http://stackoverflow.com/questions/3704466/easy-way-to-drop-xml-namespaces-with-javascript
        // RegEx Expects every node to have a namespace prefix, add the two missing prefixes
        response = CrmAjaxFunctions.ReplaceAll(response, "<ExecuteResponse ", "<a:ExecuteResponse ");
        response = CrmAjaxFunctions.ReplaceAll(response, "<ExecuteResult ", "<a:ExecuteResult ");
        if (null != response) response = response.replace(/<(\/?)([^:>]*:)?([^>]+)>/g, "<$1$3>");
        var doc = CrmAjaxFunctions.ParseXmlString(response);

        if (CrmAjaxFunctions.GetElementText(doc.getElementsByTagName("ResponseName")[0]) == "RetrieveMultiple") {
            var elements = doc.getElementsByTagName("Entity");
            var entities = new Array();
            for (var i = 0; i < elements.length; i++) {
                entities[i] = CrmAjaxFunctions.XML2jsobj(elements[i]);
            }
            return entities;
        } else {
            return doc.getElementsByTagName("Results")[0];
        }
    },
    ExecuteRequest: function (requestXml, onSuccess, onError, async) {
        /// <summary>Wraps the requestXML in a SOAP Envelope and executes the request, calling the appropriate result functions</summary>
        /// <param name="requestXml" type="String">CRM Request Xml</param>
        /// <param name="onSuccess" type="function">function to handle the response XML.</param>
        /// <param name="onError" type="function">
        ///     function to handle an error.  
        ///     Defaults to alerting the error message.
        /// </param>
        /// <param name="async" type="Boolean">
        ///     Controls if the request is performed asynchronously.
        ///     Defaults to false
        /// </param>

        if (async == null) {
            async = false;
        }
        var soapEnvelope = ""
            + "<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\">"
            + "<s:Body>"
            + "    <Execute xmlns=\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">"
            + requestXml
            + "    </Execute>"
            + "  </s:Body>"
            + "</s:Envelope>";
        var req = CrmAjaxFunctions.GetXMLHttpRequest();
        req.open("POST", CrmAjaxFunctions.GetServerUrl(), async)
        try { req.responseType = "msxml-document"; } catch (e) { } // IE10 support
        // Responses will return XML. It isn't possible to return JSON.
        req.setRequestHeader("Accept", "application/xml, text/xml, */*");
        req.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
        req.setRequestHeader("SOAPAction", "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Execute");
        req.onreadystatechange = function () { CrmAjaxFunctions.ExecuteSOAPResponse(req, onSuccess, onError); };
        req.send(soapEnvelope);
    },
    GetElementText: function (element) {
        /// <summary>Handles issues between IE9 and IE10.  IE9 doesn't support text, IE10 doesn't support textContent </summary>
        /// <param name="element" type="XmlElement">Element to return the textContent or text of</param>
        return element.textContent || element.text;
    },
    ReplaceAll: function (str, find, replace) {
        if (null != str) return str.replace(new RegExp(find, "g"), replace);
        else return str;
    },
    ParseXmlString: function (txt) {
        var xmlDoc;
        if (window.DOMParser) {
            parser = new DOMParser();
            xmlDoc = parser.parseFromString(txt, "text/xml");
        }
        else // Internet Explorer
        {
            xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
            xmlDoc.async = false;
            xmlDoc.loadXML(txt);
        }
        return xmlDoc;
    },
    XML2jsobj: function (node) {
        var data = {};
        var isNull = true;

        // append a value
        function Add(name, value) {
            isNull = false;
            if (data[name]) {
                if (data[name].constructor != Array) {
                    data[name] = [data[name]];
                }
                data[name][data[name].length] = value;
            }
            else {
                data[name] = value;
            }
        };

        function AddAttributes(entity, node) {
            for (var i = 0; i < node.childNodes.length; i++) {
                isNull = false;
                //KeyValuePairOfstringanyType
                var valuePair = node.childNodes[i];
                var key = CrmAjaxFunctions.GetElementText(valuePair.firstChild);
                var value = valuePair.childNodes[1].childNodes;
                if (value.length == 1 && value[0].tagName == "Value") {
                    data[key] = CrmAjaxFunctions.GetElementText(value[0]);
                } else if (value.length == 1 && value[0].nodeType == 3) {
                    data[key] = value[0].nodeValue;
                } else {
                    data[key] = CrmAjaxFunctions.XML2jsobj(valuePair.childNodes[1]);
                }
            }
        };

        // element attributes
        var c, cn;
        // skip type and namespace values
        //for (c = 0; cn = node.attributes[c]; c++) {
        //    Add(cn.name, cn.value);
        //}

        // child elements
        for (c = 0; cn = node.childNodes[c]; c++) {
            if (cn.nodeType == 1) {
                if (cn.childNodes.length == 1 && cn.firstChild.nodeType == 3) {
                    // text value
                    Add(cn.nodeName, cn.firstChild.nodeValue);
                }
                else if (cn.nodeName == "Attributes") {
                    AddAttributes(data, cn)
                } else {
                    // sub-object
                    Add(cn.nodeName, CrmAjaxFunctions.XML2jsobj(cn));
                }
            }
        }

        if (isNull) {
            data = null;
        }
        return data;
    },
    GetServerUrl: function () {
        /// <summary>Returns the URL for the SOAP endpoint using the context information available in the form or HTML Web resource.</summary>
        var OrgServicePath = "/XRMServices/2011/Organization.svc/web";
        var serverUrl = "";
        if (typeof GetGlobalContext == "function") {
            var context = GetGlobalContext();
            serverUrl = context.getClientUrl();
        }
        else {
            if (typeof Xrm.Page.context == "object") {
                serverUrl = Xrm.Page.context.getClientUrl();
            }
            else {
                throw new Error("Unable to access the server URL");
            }
        }
        if (serverUrl.match(/\/$/)) {
            serverUrl = serverUrl.substring(0, serverUrl.length - 1);
        }

        return serverUrl + OrgServicePath;
    },
    GetError: function (faultXml) {
        ///<summary>
        /// Parses the WCF fault returned in the event of an error.
        ///</summary>
        ///<param name="faultXml" Type="XML">
        /// The responseXML property of the XMLHttpRequest response.
        ///</param>
        var errorMessage = "Unknown Error (Unable to parse the fault)";
        if (typeof faultXml == "object") {
            try {
                var bodyNode = faultXml.firstChild.firstChild;
                //Retrieve the fault node
                for (var i = 0; i < bodyNode.childNodes.length; i++) {
                    var node = bodyNode.childNodes[i];
                    //NOTE: This comparison does not handle the case where the XML namespace changes
                    if (node.nodeName == "s:Fault" || node.nodeName == "Fault") {
                        for (var j = 0; j < node.childNodes.length; j++) {
                            var faultStringNode = node.childNodes[j];
                            if ("faultstring" == faultStringNode.nodeName) {
                                errorMessage = CrmAjaxFunctions.GetElementText(faultStringNode);
                                break;
                            }
                        }
                        break;
                    }
                }
            }
            catch (e) { };
        }
        return new Error(errorMessage);
    },
    ExecuteSOAPResponse: function (req, successCallback, errorCallback) {
        /// <summary>Receives the assign Response</summary>
        /// <param name="req" Type="XMLHttpRequest">
        ///     The XMLHttpRequest response
        /// </param>
        /// <param name="successCallback" Type="Function">
        ///     The function to perform when an successfult response is returned.
        ///     For this message no data is returned so a success callback is not really necessary.
        /// </param>
        /// <param name="errorCallback" Type="Function">
        ///     The function to perform when an error is returned.
        ///     This function accepts a JScript error returned by the GetError function
        /// </param>

        if (req.readyState == 2 || req.readyState == 4 /* complete */) {
            if (req.status == 200 && req.responseXML != null && req.responseXML.documentElement != null) {
                if (successCallback != null) {
                    var response = null;
                    if (req.responseXML != null) {
                        successCallback(req.responseXML.xml || new XMLSerializer().serializeToString(req.responseXML));
                    }
                }
            }
            else {
                if (errorCallback == null) {
                    alert(CrmAjaxFunctions.GetError(req.responseXML));
                } else {
                    errorCallback(CrmAjaxFunctions.GetError(req.responseXML));
                }
            }
        }
    }
    // END SOAP DEPENDENT CODE BLOCK
};
